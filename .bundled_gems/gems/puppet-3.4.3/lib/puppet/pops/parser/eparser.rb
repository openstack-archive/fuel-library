#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 699)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'68,215,228,229,-126,230,202,229,238,87,88,84,79,90,290,94,262,89,-124',
'68,80,82,81,83,68,217,51,53,51,53,224,223,90,239,94,-192,89,90,93,94',
'199,89,86,85,-126,212,72,73,75,74,77,78,276,70,71,51,53,93,-124,68,69',
'202,93,117,-201,54,119,76,87,88,84,79,90,240,94,-192,89,70,71,80,82',
'81,83,68,69,59,229,59,51,53,292,212,117,109,312,119,90,93,94,112,89',
'86,85,111,-201,72,73,75,74,77,78,294,70,71,59,51,53,279,68,69,112,93',
'51,53,111,54,76,87,88,84,79,90,307,94,306,89,70,71,80,82,81,83,112,69',
'112,219,111,59,111,321,218,278,117,112,112,119,93,111,111,117,86,85',
'119,275,72,73,75,74,77,78,220,70,71,221,59,68,68,307,69,306,238,59,189',
'299,300,76,84,79,90,90,94,94,89,89,301,80,82,81,83,51,53,202,68,165',
'51,53,284,64,66,65,67,125,304,93,93,90,236,94,85,89,308,72,73,75,74',
'77,78,310,70,71,222,261,68,236,238,69,54,317,318,260,93,54,76,84,79',
'90,260,94,63,89,63,131,80,82,81,83,68,102,254,327,253,198,113,252,330',
'102,103,238,102,90,93,94,334,89,310,336,337,338,72,73,75,74,77,78,339',
'70,71,99,342,343,344,68,69,91,93,236,63,60,351,76,87,88,84,79,90,352',
'94,353,89,70,71,80,82,81,83,68,69,354,,,,,,,,,,79,90,93,94,,89,86,85',
'80,,72,73,75,74,77,78,,70,71,,,,,,69,,93,,,,,76,68,,72,73,75,74,77,78',
',70,71,,79,90,,94,69,89,,,80,,,76,68,,,,,,,,,,,,79,90,93,94,,89,,,80',
',72,73,75,74,77,78,,70,71,,,,,,69,,93,,,,,76,68,,72,73,75,74,77,78,',
'70,71,,79,90,,94,69,89,,,80,,,76,68,,,,,,,,,,,,,90,93,94,,89,,,,,72',
'73,75,74,77,78,,70,71,,,,,,69,,93,,,,,76,,,72,73,75,74,77,78,,70,71',
',,,,68,69,,,,,,,76,87,88,84,79,90,,94,,89,,,80,82,81,83,68,,,,,,,,,',
',,,90,93,94,,89,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,,93,,,,68,76',
',,72,73,75,74,77,78,,70,71,90,,94,,89,69,,,,,,68,76,,,,,,,,,,,,90,93',
'94,,89,,,,,72,73,75,74,,,,70,71,,,,,,69,,93,,,,,76,,,72,73,75,74,,,',
'70,71,,,,,68,69,,,,,,,76,87,88,84,79,90,234,94,,89,,,80,82,81,83,,,',
',,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,68,69,,,,,,,76',
'87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72',
'73,75,74,77,78,,70,71,,,,,68,69,,,,,,,76,87,88,84,79,90,,94,,89,,,80',
'82,81,83,68,,,,,,,,,,,,,90,93,94,,89,86,85,,,72,73,75,74,77,78,,70,71',
',,,,,69,,93,,,,,76,,,,,75,74,,,,70,71,,,,,68,69,,,,,,,76,87,88,84,79',
'90,,94,,89,,,80,82,81,83,68,,,,,,,,,,,,,90,93,94,,89,86,85,,,72,73,75',
'74,77,78,,70,71,,,,,,69,,93,,,,,76,,,,,75,74,,,,70,71,,,,,68,69,,,,',
',,76,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85',
',,72,73,75,74,77,78,,70,71,,,,,68,69,,,,,,,76,87,88,84,79,90,,94,,89',
',,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,',
',,,68,69,,,,,,,76,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,',
',93,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,68,69,,,,,,,76,87,88,84',
'79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74',
'77,78,,70,71,,,,,68,69,,,,,,,76,87,88,84,79,90,,94,,89,,,80,82,81,83',
',,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,68,69,208,',
',,,,76,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85',
',,72,73,75,74,77,78,,70,71,,,,,68,69,207,,,,,,76,87,88,84,79,90,,94',
',89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70',
'71,,,,,68,69,206,,,,,,76,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,',
',,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,68,69,205,,,,,,76',
'87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72',
'73,75,74,77,78,,70,71,,,,,68,69,,,,,,,76,87,88,84,79,90,,94,,89,,194',
'80,82,81,83,,,,,,,,,,51,53,,,47,93,48,,,86,85,,,72,73,75,74,77,78,,70',
'71,13,,,,,69,38,,44,,46,96,76,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,164,13,,,,,,167,184,178,185,46,179,187,180,176',
'174,,169,182,,,,55,12,188,183,181,51,53,11,,47,,48,324,,,59,,,,,186',
'168,,,,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56',
',47,11,48,313,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,167,184,178,185,46,179,187,180',
'176,174,,169,182,,,,55,12,188,183,181,51,53,11,,47,,48,,,,59,,,,,186',
'168,,,,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58',
'54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,196,,',
',,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,',
'47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,',
',,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,204,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,',
',,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,',
'40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,',
'39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11',
'48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54',
',40,57,,,,55,12,,,56,51,53,11,,47,283,48,,,,59,,,,,,39,,,,,,13,,,,,',
'38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,326,,,,,',
'59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,266,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11',
'48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,258,,,,,,59,,,,,,39,,,13,,,,,',
'38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,',
'47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,',
',,55,12,,,56,51,53,11,,47,123,48,,,,59,,,,,,39,,,,,,13,,,,,,38,,44,',
'46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,341,,,,,,59,,,,',
',39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,346,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56',
',47,11,48,348,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40',
'57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,',
'46,42,,45,58,54,61,40,57,43,,,55,12,51,53,56,,47,11,48,350,,,,,,59,',
',,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56',
',47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57',
'43,,,55,12,51,53,56,,47,11,48,264,,,,,,59,,,,,,39,,,13,,,,,,38,,44,',
'46,42,,45,58,54,,40,57,43,,,55,12,,,56,,,11,,,,248,184,247,185,59,245',
'187,249,243,242,39,244,246,,,,,,188,183,250,248,184,247,185,,245,187',
'249,243,242,,244,246,,,186,251,,188,183,250,248,184,247,185,,245,187',
'249,243,242,,244,246,,,186,251,,188,183,250,,,,,,,,,,,,,,,,186,251' ]
        racc_action_table = arr = ::Array.new(4874, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'161,115,138,203,176,161,102,138,291,161,161,161,161,161,231,161,203',
'161,174,139,161,161,161,161,148,115,215,215,71,71,130,130,139,177,139',
'182,139,148,161,148,102,148,161,161,176,110,161,161,161,161,161,161',
'212,161,161,217,217,139,174,160,161,212,148,215,181,71,215,161,160,160',
'160,160,160,177,160,182,160,148,148,160,160,160,160,147,148,215,267',
'71,70,70,235,114,217,42,267,217,147,160,147,96,147,160,160,96,181,160',
'160,160,160,160,160,237,160,160,217,180,180,214,159,160,42,147,45,45',
'42,70,160,159,159,159,159,159,264,159,264,159,147,147,159,159,159,159',
'275,147,179,122,275,70,179,275,122,213,180,44,178,180,159,44,178,45',
'159,159,45,210,159,159,159,159,159,159,124,159,159,124,180,158,97,304',
'159,304,241,45,92,255,257,159,158,158,158,97,158,97,158,97,259,158,158',
'158,158,221,221,260,95,90,48,48,221,7,7,7,7,48,263,158,97,95,209,95',
'158,95,265,158,158,158,158,158,158,266,158,158,127,202,157,270,271,158',
'221,272,273,200,95,48,158,157,157,157,277,157,132,157,62,60,157,157',
'157,157,146,196,195,289,193,101,43,191,298,299,37,171,36,146,157,146',
'307,146,308,310,311,315,157,157,157,157,157,157,316,157,157,35,322,323',
'325,10,157,10,146,170,5,1,340,157,10,10,10,10,10,345,10,347,10,146,146',
'10,10,10,10,156,146,349,,,,,,,,,,156,156,10,156,,156,10,10,156,,10,10',
'10,10,10,10,,10,10,,,,,,10,,156,,,,,10,155,,156,156,156,156,156,156',
',156,156,,155,155,,155,156,155,,,155,,,156,154,,,,,,,,,,,,154,154,155',
'154,,154,,,154,,155,155,155,155,155,155,,155,155,,,,,,155,,154,,,,,155',
'153,,154,154,154,154,154,154,,154,154,,153,153,,153,154,153,,,153,,',
'154,152,,,,,,,,,,,,,152,153,152,,152,,,,,153,153,153,153,153,153,,153',
'153,,,,,,153,,152,,,,,153,,,152,152,152,152,152,152,,152,152,,,,,303',
'152,,,,,,,152,303,303,303,303,303,,303,,303,,,303,303,303,303,151,,',
',,,,,,,,,,151,303,151,,151,303,303,,,303,303,303,303,303,303,,303,303',
',,,,,303,,151,,,,150,303,,,151,151,151,151,151,151,,151,151,150,,150',
',150,151,,,,,,149,151,,,,,,,,,,,,149,150,149,,149,,,,,150,150,150,150',
',,,150,150,,,,,,150,,149,,,,,150,,,149,149,149,149,,,,149,149,,,,,166',
'149,,,,,,,149,166,166,166,166,166,166,166,,166,,,166,166,166,166,,,',
',,,,,,,,,,,166,,,,166,166,,,166,166,166,166,166,166,,166,166,,,,,297',
'166,,,,,,,166,297,297,297,297,297,,297,,297,,,297,297,297,297,,,,,,',
',,,,,,,,297,,,,297,297,,,297,297,297,297,297,297,,297,297,,,,,296,297',
',,,,,,297,296,296,296,296,296,,296,,296,,,296,296,296,296,145,,,,,,',
',,,,,,145,296,145,,145,296,296,,,296,296,296,296,296,296,,296,296,,',
',,,296,,145,,,,,296,,,,,145,145,,,,145,145,,,,,288,145,,,,,,,145,288',
'288,288,288,288,,288,,288,,,288,288,288,288,144,,,,,,,,,,,,,144,288',
'144,,144,288,288,,,288,288,288,288,288,288,,288,288,,,,,,288,,144,,',
',,288,,,,,144,144,,,,144,144,,,,,286,144,,,,,,,144,286,286,286,286,286',
',286,,286,,,286,286,286,286,,,,,,,,,,,,,,,286,,,,286,286,,,286,286,286',
'286,286,286,,286,286,,,,,190,286,,,,,,,286,190,190,190,190,190,,190',
',190,,,190,190,190,190,,,,,,,,,,,,,,,190,,,,190,190,,,190,190,190,190',
'190,190,,190,190,,,,,282,190,,,,,,,190,282,282,282,282,282,,282,,282',
',,282,282,282,282,,,,,,,,,,,,,,,282,,,,282,282,,,282,282,282,282,282',
'282,,282,282,,,,,128,282,,,,,,,282,128,128,128,128,128,,128,,128,,,128',
'128,128,128,,,,,,,,,,,,,,,128,,,,128,128,,,128,128,128,128,128,128,',
'128,128,,,,,121,128,,,,,,,128,121,121,121,121,121,,121,,121,,,121,121',
'121,121,,,,,,,,,,,,,,,121,,,,121,121,,,121,121,121,121,121,121,,121',
'121,,,,,108,121,108,,,,,,121,108,108,108,108,108,,108,,108,,,108,108',
'108,108,,,,,,,,,,,,,,,108,,,,108,108,,,108,108,108,108,108,108,,108',
'108,,,,,107,108,107,,,,,,108,107,107,107,107,107,,107,,107,,,107,107',
'107,107,,,,,,,,,,,,,,,107,,,,107,107,,,107,107,107,107,107,107,,107',
'107,,,,,106,107,106,,,,,,107,106,106,106,106,106,,106,,106,,,106,106',
'106,106,,,,,,,,,,,,,,,106,,,,106,106,,,106,106,106,106,106,106,,106',
'106,,,,,104,106,104,,,,,,106,104,104,104,104,104,,104,,104,,,104,104',
'104,104,,,,,,,,,,,,,,,104,,,,104,104,,,104,104,104,104,104,104,,104',
'104,,,,,98,104,,,,,,,104,98,98,98,98,98,,98,,98,,98,98,98,98,98,,,,',
',,,,,89,89,,,89,98,89,,,98,98,,,98,98,98,98,98,98,,98,98,89,,,,,98,89',
',89,,89,89,98,89,89,89,,89,89,,,,89,89,208,208,89,,208,89,208,,,,,,',
'89,,,,,,89,,89,208,,,,,,208,208,208,208,208,208,208,208,208,208,,208',
'208,,,,208,208,208,208,208,278,278,208,,278,,278,278,,,208,,,,,208,208',
',,,,,278,,,,,,278,,278,,278,278,,278,278,278,,278,278,278,,,278,278',
'268,268,278,,268,278,268,268,,,,,,278,,,,,,278,,,268,,,,,,268,,268,',
'268,268,,268,268,268,,268,268,,,,268,268,72,72,268,,72,268,72,,,,,,',
'268,,,,,,268,,,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,,,,72,72,73,73',
'72,,73,72,73,,,,,,,72,,,,,,72,,,73,,,,,,73,,73,,73,73,,73,73,73,,73',
'73,,,,73,73,74,74,73,,74,73,74,,,,,,,73,,,,,,73,,,74,,,,,,74,,74,,74',
'74,,74,74,74,,74,74,,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75',
',,,,,75,,75,,75,75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,,,',
',,75,,,,,,75,,,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,76,76,77,77',
'76,,77,76,77,,,,,,,76,,,,,,76,,,77,,,,,,77,,77,,77,77,,77,77,77,,77',
'77,,,,77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,,,,,,78,,78,,78',
'78,,78,78,78,,78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79',
',,,,,79,,79,,79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79,80,,,,',
',,79,,,,,,79,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,80,80,81,81',
'80,,81,80,81,,,,,,,80,,,,,,80,,,81,,,,,,81,,81,,81,81,,81,81,81,,81',
'81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,,,,,,82,,82,,82',
'82,,82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83',
',,,,,83,,83,,83,83,,83,83,83,,83,83,,,,83,83,84,84,83,,84,83,84,,,,',
',,83,,,,,,83,,,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,,,,84,84,85,85',
'84,,85,84,85,,,,,,,84,,,,,,84,,,85,,,,,,85,,85,,85,85,,85,85,85,,85',
'85,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85,,,86,,,,,,86,,86,,86',
'86,,86,86,86,,86,86,,,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86,,,87',
',,,,,87,,87,,87,87,,87,87,87,,87,87,,,,87,87,88,88,87,,88,87,88,,,,',
',,87,,,,,,87,,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,88,88,68,68',
'88,,68,88,68,,,,,,,88,,,,,,88,,,68,,,,,,68,,68,,68,68,,68,68,68,,68',
'68,,,,68,68,261,261,68,,261,68,261,,,,,,,68,,,,,,68,,,261,,,,,,261,',
'261,,261,261,,261,261,261,,261,261,,,,261,261,91,91,261,,91,261,91,',
',,,,,261,,,,,,261,,,91,,,,,,91,91,91,91,91,91,91,91,91,91,,91,91,,,',
'91,91,91,91,91,254,254,91,,254,,254,,,,91,,,,,91,91,,,,,,254,,,,,,254',
',254,,254,254,,254,254,254,,254,254,,,,254,254,93,93,254,,93,254,93',
',,,,,,254,,,,,,254,,,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,93,93',
'94,94,93,,94,93,94,,,,,,,93,,,,,,93,,,94,,,,,,94,,94,,94,94,,94,94,94',
',94,94,,,,94,94,240,240,94,,240,94,240,,,,,,,94,,,,,,94,,,240,,,,,,240',
',240,,240,240,,240,240,240,,240,240,,,,240,240,239,239,240,,239,240',
'239,,,,,,,240,,,,,,240,,,239,,,,,,239,,239,,239,239,,239,239,239,,239',
'239,,,,239,239,236,236,239,,236,239,236,,,,,,,239,,,,,,239,,,236,,,',
',,236,,236,,236,236,,236,236,236,,236,236,,,,236,236,67,67,236,,67,236',
'67,,,,,,,236,,,,,,236,,,67,,,,,,67,,67,,67,67,,67,67,67,,67,67,67,,',
'67,67,99,99,67,,99,67,99,,,,,,,67,,,,,,67,,,99,99,,,,,99,,99,,99,99',
',99,99,99,,99,99,,,,99,99,230,230,99,,230,99,230,,,,,,,99,,,,,,99,,',
'230,,,,,,230,,230,,230,230,,230,230,230,,230,230,,,,230,230,229,229',
'230,,229,230,229,,,,,,,230,,,,,,230,,,229,,,,,,229,,229,,229,229,,229',
'229,229,,229,229,,,,229,229,103,103,229,,103,229,103,,,,,,,229,,,,,',
'229,,,103,103,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,103,103',
'66,66,103,,66,103,66,,,,,,,103,,,,,,103,,,66,,,,,,66,,66,,66,66,,66',
'66,66,,66,66,66,,,66,66,65,65,66,,65,66,65,,,,,,,66,,,,,,66,,,65,,,',
',,65,,65,,65,65,,65,65,65,,65,65,65,,,65,65,64,64,65,,64,65,64,,,,,',
',65,,,,,,65,,,64,,,,,,64,,64,,64,64,,64,64,64,,64,64,64,,,64,64,63,63',
'64,,63,64,63,,,,,,,64,,,,,,64,,,63,,,,,,63,,63,,63,63,,63,63,63,,63',
'63,63,,,63,63,109,109,63,,109,63,109,,,,,,,63,,,,,,63,,,109,,,,,,109',
',109,,109,109,,109,109,109,,109,109,,,,109,109,227,227,109,,227,109',
'227,,,,,,,109,,,,,,109,,,227,,,,,,227,,227,,227,227,,227,227,227,,227',
'227,,,,227,227,222,222,227,,222,227,222,,,,,,,227,,,,,,227,,,222,,,',
',,222,,222,,222,222,,222,222,222,,222,222,,,,222,222,,,222,218,218,222',
',218,218,218,,,,222,,,,,,222,,,,,,218,,,,,,218,,218,,218,218,,218,218',
'218,,218,218,,,,218,218,279,279,218,,279,218,279,279,,,,,,218,,,,,,218',
',,279,,,,,,279,,279,,279,279,,279,279,279,,279,279,279,,,279,279,69',
'69,279,,69,279,69,,,,,,,279,,,,,,279,,,69,,,,,,69,,69,,69,69,,69,69',
'69,,69,69,,,,69,69,207,207,69,,207,69,207,,,,,,,69,,,,,,69,,,207,,,',
',,207,,207,,207,207,,207,207,207,,207,207,,,,207,207,206,206,207,,206',
'207,206,206,,,,,,207,,,,,,207,,,206,,,,,,206,,206,,206,206,,206,206',
'206,,206,206,206,,,206,206,61,61,206,,61,206,61,,,,,,,206,,,,,,206,',
',61,,,,,,61,,61,,61,61,,61,61,61,,61,61,61,,,61,61,164,164,61,,164,61',
'164,,,,,,,61,,,,,,61,,,164,,,,,,164,,164,,164,164,,164,164,164,,164',
'164,,,,164,164,198,198,164,,198,164,198,198,,,,,,164,,,,,,164,,,198',
',,,,,198,,198,,198,198,,198,198,198,,198,198,198,,,198,198,52,52,198',
',52,198,52,,,,,,,198,,,,,,198,,,52,,,,,,52,,52,,52,52,,52,52,52,,52',
'52,,,,52,52,169,169,52,,169,52,169,,,,,,,52,,,,,,52,,,169,,,,,,169,',
'169,,169,169,,169,169,169,,169,169,,,,169,169,,,169,47,47,169,,47,47',
'47,,,,169,,,,,,169,,,,,,47,,,,,,47,,47,,47,47,,47,47,47,,47,47,,,,47',
'47,290,290,47,,290,47,290,,,,,,,47,,,,,,47,,,290,,,,,,290,,290,,290',
'290,,290,290,290,,290,290,,,,290,290,168,168,290,,168,290,168,,,,,,',
'290,,,,,,290,,,168,,,,,,168,,168,,168,168,,168,168,168,,168,168,,,,168',
'168,167,167,168,,167,168,167,,,,,,,168,,,,,,168,,,167,,,,,,167,,167',
',167,167,,167,167,167,,167,167,,,,167,167,41,41,167,,41,167,41,,,,,',
',167,,,,,,167,,,41,,,,,,41,,41,,41,41,,41,41,41,,41,41,,,,41,41,40,40',
'41,,40,41,40,,,,,,,41,,,,,,41,,,40,,,,,,40,,40,,40,40,,40,40,40,,40',
'40,,,,40,40,39,39,40,,39,40,39,,,,,,,40,,,,,,40,,,39,,,,,,39,,39,,39',
'39,,39,39,39,,39,39,,,,39,39,38,38,39,,38,39,38,,,,,,,39,,,,,,39,,,38',
',,,,,38,,38,,38,38,,38,38,38,,38,38,,,,38,38,306,306,38,,306,38,306',
',,,,,,38,,,,,,38,,,306,,,,,,306,,306,,306,306,,306,306,306,,306,306',
',,,306,306,318,318,306,,318,306,318,318,,,,,,306,,,,,,306,,,318,,,,',
',318,,318,,318,318,,318,318,318,,318,318,318,,,318,318,13,13,318,,13',
'318,13,,,,,,,318,,,,,,318,,,13,,,,,,13,,13,,13,13,,13,13,13,,13,13,',
',,13,13,12,12,13,,12,13,12,,,,,,,13,,,,,,13,,,12,,,,,,12,,12,,12,12',
',12,12,12,,12,12,,,,12,12,11,11,12,,11,12,11,,,,,,,12,,,,,,12,,,11,',
',,,,11,,11,,11,11,,11,11,11,,11,11,,,,11,11,334,334,11,,334,11,334,334',
',,,,,11,,,,,,11,,,334,,,,,,334,,334,,334,334,,334,334,334,,334,334,334',
',,334,334,336,336,334,,336,334,336,336,,,,,,334,,,,,,334,,,336,,,,,',
'336,,336,,336,336,,336,336,336,,336,336,336,,,336,336,4,4,336,,4,336',
'4,,,,,,,336,,,,,,336,,,4,,,,,,4,,4,,4,4,,4,4,4,4,4,4,4,,,4,4,337,337',
'4,,337,4,337,337,,,,,,4,,,,,,4,,,337,,,,,,337,,337,,337,337,,337,337',
'337,,337,337,337,,,337,337,0,0,337,,0,337,0,,,,,,,337,,,,,,337,,,0,',
',,,,0,,0,,0,0,,0,0,0,,0,0,0,,,0,0,205,205,0,,205,0,205,205,,,,,,0,,',
',,,0,,,205,,,,,,205,,205,,205,205,,205,205,205,,205,205,205,,,205,205',
',,205,,,205,,,,233,233,233,233,205,233,233,233,233,233,205,233,233,',
',,,,233,233,233,189,189,189,189,,189,189,189,189,189,,189,189,,,233',
'233,,189,189,189,238,238,238,238,,238,238,238,238,238,,238,238,,,189',
'189,,238,238,238,,,,,,,,,,,,,,,,238,238' ]
        racc_action_check = arr = ::Array.new(4874, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4691,   297,   nil,   nil,  4599,   284,   nil,   145,   nil,   nil,
   285,  4461,  4415,  4369,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   263,   200,   242,  4231,  4185,
  4139,  4093,    85,   219,   118,   120,   nil,  3909,   202,   nil,
   nil,   nil,  3814,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   251,  3676,   238,  3259,  3213,  3167,  3121,  2891,  2474,  3538,
    86,    26,  1692,  1738,  1784,  1830,  1876,  1922,  1968,  2014,
  2060,  2106,  2152,  2198,  2244,  2290,  2336,  2382,  2428,  1505,
   164,  2566,   174,  2661,  2707,   196,    64,   170,  1468,  2937,
   nil,   253,   -28,  3075,  1409,   nil,  1350,  1291,  1232,  3305,
    21,   nil,   nil,   nil,    67,   -11,   nil,   nil,   nil,   nil,
   nil,  1173,   138,   nil,   161,   nil,   nil,   219,  1114,   nil,
    26,   nil,   236,   nil,   nil,   nil,   nil,   nil,    -5,    13,
   nil,   nil,   nil,   nil,   878,   795,   250,    77,    18,   594,
   570,   528,   445,   421,   377,   353,   309,   226,   169,   112,
    53,    -6,   nil,   nil,  3722,   nil,   653,  4047,  4001,  3860,
   255,   255,   nil,   nil,     7,   nil,    -7,    22,   119,   109,
   113,    53,    24,   nil,   nil,   nil,   nil,   nil,   nil,  4785,
   996,   218,   nil,   238,   nil,   246,   189,   nil,  3768,   nil,
   227,   nil,   216,    -9,   nil,  4737,  3630,  3584,  1551,   176,
   127,   nil,    27,   143,   109,    24,   nil,    53,  3446,   nil,
   nil,   197,  3397,   nil,   nil,   nil,   nil,  3351,   nil,  3029,
  2983,     2,   nil,  4764,   nil,    81,  2845,   102,  4806,  2799,
  2753,   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  2615,   158,   nil,   175,   nil,   126,
   167,  2520,   nil,   203,   101,   211,   196,    74,  1646,   nil,
   193,   222,   228,   230,   nil,   107,   nil,   234,  1600,  3492,
   nil,   nil,  1055,   nil,   nil,   nil,   937,   nil,   854,   250,
  3955,    -4,   nil,   nil,   nil,   nil,   771,   712,   255,   197,
   nil,   nil,   nil,   504,   146,   nil,  4277,   264,   243,   nil,
   267,   268,   nil,   nil,   nil,   268,   275,   nil,  4323,   nil,
   nil,   nil,   263,   280,   nil,   281,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  4507,   nil,  4553,  4645,   nil,   nil,
   289,   nil,   nil,   nil,   nil,   296,   nil,   298,   nil,   308,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -203,  -204,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -103,  -204,  -204,  -204,   -43,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -68,   -69,   -73,  -204,  -204,
  -204,  -204,  -204,  -113,  -204,  -204,  -158,  -204,  -204,  -168,
  -169,  -170,  -204,  -172,  -179,  -180,  -181,  -182,  -183,  -184,
  -204,  -204,    -6,  -204,  -204,  -204,  -204,  -204,  -204,  -204,
  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,
  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,
  -204,  -121,  -116,  -203,  -203,   -27,  -204,   -34,  -204,  -204,
   -70,  -204,  -204,  -204,  -204,   -80,  -204,  -204,  -204,  -204,
  -203,  -147,  -148,  -114,  -203,  -203,  -139,  -141,  -142,  -143,
  -144,   -41,  -204,  -161,  -204,  -164,  -165,  -204,  -176,  -171,
  -204,   355,    -5,    -8,   -11,   -12,   -13,   -14,  -204,   -17,
   -18,  -156,  -157,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -28,   -29,   -30,   -31,   -32,   -33,   -35,   -36,   -37,
   -38,  -204,   -39,   -98,  -204,   -74,  -204,  -196,  -202,  -190,
  -187,  -185,  -111,  -122,  -179,  -125,  -183,  -204,  -193,  -191,
  -199,  -181,  -182,  -189,  -194,  -195,  -197,  -198,  -200,  -121,
  -120,  -204,  -119,  -204,   -40,  -185,   -65,   -75,  -204,   -78,
  -185,  -152,  -155,  -204,   -72,  -204,  -204,  -204,  -121,  -187,
  -203,  -149,  -204,  -204,  -204,  -204,  -145,  -204,  -204,  -159,
  -162,  -204,  -204,  -173,  -174,  -175,  -177,  -204,   -16,  -204,
  -204,  -185,  -100,  -121,  -110,  -204,  -188,  -204,  -186,  -204,
  -204,  -185,  -124,  -126,  -190,  -191,  -192,  -193,  -196,  -199,
  -201,  -202,  -117,  -118,  -186,  -204,   -67,  -204,   -77,  -204,
  -186,  -204,   -71,  -204,   -83,  -204,   -89,  -204,  -204,   -93,
  -187,  -185,  -204,  -204,  -133,  -204,  -150,  -185,  -204,  -204,
  -140,  -146,   -42,  -160,  -163,  -166,  -167,  -178,  -102,  -204,
  -186,  -185,  -106,  -112,  -107,  -123,  -127,  -128,  -204,   -64,
   -76,   -79,  -153,  -154,   -83,   -82,  -204,  -204,   -89,   -88,
  -204,  -204,   -97,   -92,   -94,  -204,  -204,  -108,  -204,  -134,
  -135,  -136,  -204,  -204,  -130,  -204,  -138,   -99,  -101,  -109,
  -115,   -66,   -81,   -84,  -204,   -87,  -204,  -204,  -104,  -105,
  -204,  -132,  -151,  -129,  -137,  -204,   -86,  -204,   -91,  -204,
   -96,  -131,   -85,   -90,   -95 ]

racc_goto_table = [
     2,     3,   100,    95,    97,    98,   114,   163,   129,   126,
   170,   171,   127,   200,   118,   305,   309,   120,   235,   210,
   280,   311,   281,   213,   237,   231,   269,   293,   209,   233,
   104,   106,   107,   108,   142,   142,    62,   140,   143,   121,
   191,   193,   141,   141,   128,   268,   295,   333,   255,   134,
   135,   136,   137,   259,   197,   332,   273,   272,   335,   319,
   121,   139,   214,   162,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   232,   166,   289,   190,   190,   314,   302,   122,
   124,   121,   133,   132,   298,   121,     1,   226,   227,   225,
   nil,   166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   241,
   138,   211,   nil,   nil,   nil,   211,   216,   nil,   315,   nil,
   nil,   nil,   nil,   277,   316,   nil,   nil,   270,   271,   nil,
   322,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   114,   195,   nil,   nil,   329,   203,   nil,   nil,   nil,   118,
   nil,   nil,   120,   291,   nil,   nil,   161,   nil,   nil,   104,
   106,   107,   256,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   285,   287,   118,   127,   118,   120,   nil,   120,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,   121,
   166,   nil,   nil,   nil,   nil,   263,   265,   nil,   328,   nil,
   282,   274,   nil,   nil,   286,   nil,   nil,   nil,   nil,   128,
   nil,   282,   288,   nil,   nil,   nil,   nil,   nil,   166,   nil,
   nil,   296,   297,   nil,   nil,   nil,   nil,   320,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   282,   nil,   nil,   nil,
   nil,   nil,   nil,   303,   nil,   nil,   nil,   nil,   nil,   nil,
   121,   nil,   nil,   nil,   nil,   331,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   323,   325,
   nil,   nil,   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   345,   nil,   347,   349 ]

racc_goto_check = [
     2,     3,    37,     9,     9,     9,    62,    49,    75,    71,
    52,    54,    31,    42,    35,    44,    45,    30,    53,    63,
    68,    48,    68,    63,    36,    50,    47,    55,    52,    56,
     9,     9,     9,     9,    31,    31,     5,    12,    12,     9,
    58,    58,    30,    30,     9,    46,    59,    43,    36,     7,
     7,     7,     7,    36,    41,    44,    64,    53,    45,    65,
     9,     9,    67,    13,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,    49,     9,    36,     9,     9,    47,    69,    11,
    70,     9,     6,     5,    36,     9,     1,    76,    77,    79,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,
    11,     3,   nil,   nil,   nil,     3,     3,   nil,    53,   nil,
   nil,   nil,   nil,    42,    36,   nil,   nil,    52,    54,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    62,    11,   nil,   nil,    36,    11,   nil,   nil,   nil,    35,
   nil,   nil,    30,    54,   nil,   nil,     9,   nil,   nil,     9,
     9,     9,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    71,    75,    35,    31,    35,    30,   nil,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     9,
     9,   nil,   nil,   nil,   nil,     2,     2,   nil,    49,   nil,
     9,     3,   nil,   nil,     9,   nil,   nil,   nil,   nil,     9,
   nil,     9,     9,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,     9,     9,   nil,   nil,   nil,   nil,    62,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    96,     0,     1,   nil,    32,    29,   -15,   nil,    -8,
   nil,    42,   -33,   -26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -28,   -36,   nil,   nil,   nil,   -31,  -147,   -34,   nil,   nil,
   nil,   -47,   -89,  -259,  -249,  -250,  -162,  -181,  -246,   -82,
  -139,   nil,   -81,  -152,   -80,  -209,  -137,   nil,   -53,  -192,
   nil,   nil,   -38,   -91,  -154,  -216,   nil,   -53,  -195,  -172,
    42,   -39,   nil,   nil,   nil,   -44,   -33,   -32,   nil,   -31 ]

racc_goto_default = [
   nil,   nil,   nil,   192,     4,     5,     6,     7,     8,    10,
     9,   267,   nil,   nil,    14,    35,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   nil,   nil,    36,    37,
   101,   nil,   nil,   105,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    41,   nil,   nil,   nil,   172,   nil,    92,   nil,   173,
   177,   175,   110,   nil,   nil,   nil,   115,   nil,   116,   201,
   nil,   nil,    49,    50,    52,   nil,   nil,   nil,   130,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 77, :_reduce_1,
  1, 77, :_reduce_none,
  1, 78, :_reduce_3,
  1, 80, :_reduce_4,
  3, 80, :_reduce_5,
  2, 80, :_reduce_6,
  1, 81, :_reduce_7,
  3, 81, :_reduce_8,
  1, 82, :_reduce_none,
  1, 83, :_reduce_10,
  3, 83, :_reduce_11,
  3, 83, :_reduce_12,
  3, 83, :_reduce_13,
  3, 83, :_reduce_14,
  1, 85, :_reduce_none,
  4, 85, :_reduce_16,
  3, 85, :_reduce_17,
  3, 85, :_reduce_18,
  3, 85, :_reduce_19,
  3, 85, :_reduce_20,
  3, 85, :_reduce_21,
  3, 85, :_reduce_22,
  3, 85, :_reduce_23,
  3, 85, :_reduce_24,
  3, 85, :_reduce_25,
  3, 85, :_reduce_26,
  2, 85, :_reduce_27,
  3, 85, :_reduce_28,
  3, 85, :_reduce_29,
  3, 85, :_reduce_30,
  3, 85, :_reduce_31,
  3, 85, :_reduce_32,
  3, 85, :_reduce_33,
  2, 85, :_reduce_34,
  3, 85, :_reduce_35,
  3, 85, :_reduce_36,
  3, 85, :_reduce_37,
  3, 85, :_reduce_38,
  3, 85, :_reduce_39,
  3, 85, :_reduce_40,
  1, 87, :_reduce_41,
  3, 87, :_reduce_42,
  1, 86, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 107, :_reduce_62,
  1, 107, :_reduce_63,
  5, 90, :_reduce_64,
  3, 90, :_reduce_65,
  6, 90, :_reduce_66,
  4, 90, :_reduce_67,
  1, 90, :_reduce_68,
  1, 94, :_reduce_69,
  2, 94, :_reduce_70,
  4, 114, :_reduce_71,
  3, 114, :_reduce_72,
  1, 114, :_reduce_73,
  3, 115, :_reduce_74,
  2, 113, :_reduce_75,
  3, 117, :_reduce_76,
  2, 117, :_reduce_77,
  2, 116, :_reduce_78,
  4, 116, :_reduce_79,
  2, 97, :_reduce_80,
  5, 119, :_reduce_81,
  4, 119, :_reduce_82,
  0, 120, :_reduce_none,
  2, 120, :_reduce_84,
  4, 120, :_reduce_85,
  3, 120, :_reduce_86,
  6, 98, :_reduce_87,
  5, 98, :_reduce_88,
  0, 121, :_reduce_none,
  4, 121, :_reduce_90,
  3, 121, :_reduce_91,
  5, 96, :_reduce_92,
  1, 122, :_reduce_93,
  2, 122, :_reduce_94,
  5, 123, :_reduce_95,
  4, 123, :_reduce_96,
  1, 124, :_reduce_97,
  1, 89, :_reduce_none,
  4, 89, :_reduce_99,
  1, 126, :_reduce_100,
  3, 126, :_reduce_101,
  3, 125, :_reduce_102,
  1, 84, :_reduce_103,
  6, 84, :_reduce_104,
  6, 84, :_reduce_105,
  5, 84, :_reduce_106,
  5, 84, :_reduce_107,
  5, 84, :_reduce_108,
  4, 131, :_reduce_109,
  1, 132, :_reduce_110,
  1, 128, :_reduce_111,
  3, 128, :_reduce_112,
  1, 127, :_reduce_113,
  2, 127, :_reduce_114,
  6, 95, :_reduce_115,
  2, 95, :_reduce_116,
  3, 133, :_reduce_117,
  3, 133, :_reduce_118,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  0, 130, :_reduce_121,
  1, 130, :_reduce_122,
  3, 130, :_reduce_123,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  3, 135, :_reduce_127,
  3, 135, :_reduce_128,
  6, 99, :_reduce_129,
  5, 99, :_reduce_130,
  7, 100, :_reduce_131,
  6, 100, :_reduce_132,
  1, 140, :_reduce_none,
  2, 140, :_reduce_134,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  6, 101, :_reduce_137,
  5, 101, :_reduce_138,
  1, 142, :_reduce_139,
  3, 142, :_reduce_140,
  1, 144, :_reduce_141,
  1, 144, :_reduce_142,
  1, 144, :_reduce_143,
  1, 144, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_146,
  1, 138, :_reduce_147,
  1, 138, :_reduce_148,
  1, 139, :_reduce_149,
  2, 139, :_reduce_150,
  4, 139, :_reduce_151,
  1, 118, :_reduce_152,
  3, 118, :_reduce_153,
  3, 145, :_reduce_154,
  1, 145, :_reduce_155,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 93, :_reduce_158,
  3, 102, :_reduce_159,
  4, 102, :_reduce_160,
  2, 102, :_reduce_161,
  3, 105, :_reduce_162,
  4, 105, :_reduce_163,
  2, 105, :_reduce_164,
  1, 146, :_reduce_165,
  3, 146, :_reduce_166,
  3, 147, :_reduce_167,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 148, :_reduce_170,
  2, 149, :_reduce_171,
  1, 150, :_reduce_172,
  1, 152, :_reduce_173,
  1, 153, :_reduce_174,
  2, 151, :_reduce_175,
  1, 154, :_reduce_176,
  1, 155, :_reduce_177,
  2, 155, :_reduce_178,
  1, 110, :_reduce_179,
  1, 108, :_reduce_180,
  1, 109, :_reduce_181,
  1, 104, :_reduce_182,
  1, 103, :_reduce_183,
  1, 106, :_reduce_184,
  0, 112, :_reduce_none,
  1, 112, :_reduce_186,
  0, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  0, 79, :_reduce_203 ]

racc_reduce_n = 204

racc_shift_n = 355

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :SELBRACE => 69,
  :LOW => 70,
  :HIGH => 71,
  :CALL => 72,
  :MODULO => 73,
  :TITLE_COLON => 74,
  :CASE_COLON => 75 }

racc_nt_base = 76

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 57)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 62)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_39(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_40(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_62(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 164)
  def _reduce_64(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_65(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_70(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_71(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_72(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_74(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_75(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_76(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_77(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_78(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_80(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_81(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_82(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_84(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_85(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_86(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_87(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_88(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_90(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_91(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_92(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_94(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_95(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_96(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_97(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_99(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_100(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_101(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_102(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_103(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_104(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error "A resource default can not be virtual or exported"
      when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 368)
  def _reduce_105(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error "A resource default can not specify a resource name"
      when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 408)
  def _reduce_108(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_109(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_110(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_112(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_113(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_114(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_115(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_116(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_117(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_118(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_121(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_122(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_123(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_127(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_128(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_129(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_130(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_131(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_132(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_134(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_137(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_138(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_139(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_140(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_141(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_143(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 570)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_147(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_149(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_150(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_151(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_152(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_153(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_154(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_155(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_158(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_159(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_160(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_161(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_162(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_163(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_164(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_166(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_167(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_170(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_171(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_172(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_173(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_174(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_175(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_176(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_177(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_178(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_179(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_180(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_181(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_182(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 185 omitted

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_186(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_203(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
