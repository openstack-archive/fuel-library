#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 797)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'35,36,199,198,246,159,-130,86,-112,82,277,357,361,379,356,215,210,159',
'276,-197,360,158,85,158,211,213,212,214,39,248,48,49,267,33,50,158,51',
'37,26,-129,40,46,30,35,36,32,84,217,216,31,398,203,204,206,205,208,209',
'-122,201,202,52,-130,-130,-130,-130,200,38,207,35,36,278,39,86,48,49',
'350,33,50,90,51,37,26,89,40,46,30,35,36,32,-178,94,253,31,257,280,257',
'364,274,273,92,93,215,210,52,257,255,226,336,62,38,211,213,212,214,39',
'338,48,49,254,33,50,339,51,37,26,347,40,46,30,35,36,32,-180,217,216',
'31,310,203,204,206,205,208,209,341,201,202,52,35,36,274,273,200,38,207',
'223,303,-178,39,304,48,49,-177,33,50,185,51,37,26,95,40,46,30,35,36',
'32,190,-184,281,31,397,189,344,90,201,202,226,89,215,210,52,200,357',
'250,32,356,38,211,213,212,214,39,-179,48,49,268,33,50,90,51,37,26,89',
'40,46,30,35,36,32,185,217,216,31,395,203,204,206,205,208,209,190,201',
'202,52,119,189,201,202,200,38,207,201,202,200,39,119,48,49,200,33,50',
'185,51,37,26,267,40,46,30,35,36,32,190,185,90,31,392,189,89,119,265',
'375,118,337,190,120,52,257,280,189,302,-96,38,118,257,263,120,39,-185',
'48,49,52,33,50,52,51,37,26,-123,40,46,30,35,36,32,52,103,118,31,252',
'120,279,206,205,251,257,280,201,202,52,250,243,243,262,200,38,207,257',
'263,52,137,135,139,134,136,80,132,140,141,177,168,240,131,162,35,36',
'82,32,180,142,130,163,271,94,-184,274,273,203,204,206,205,-183,52,-181',
'201,202,62,138,144,-180,353,200,39,207,48,49,354,33,50,330,51,37,26',
'-182,40,46,30,35,36,32,-177,52,-179,31,367,203,204,206,205,157,368,370',
'201,202,52,35,36,371,372,200,38,207,122,327,326,39,110,48,49,109,33',
'50,267,51,37,26,334,40,46,30,35,36,32,91,81,62,31,377,80,90,323,-179',
'37,128,382,40,46,52,35,36,32,383,-180,38,31,385,61,-228,39,387,48,49',
'388,33,50,52,51,37,26,323,40,46,30,35,36,32,319,110,393,31,308,80,90',
'317,305,37,128,158,40,46,52,53,399,32,400,,38,31,,,,39,,48,49,,33,50',
'52,51,37,26,,40,46,30,230,,32,,,,31,,,215,210,56,57,58,59,,,52,211,213',
'212,214,,38,203,204,206,205,208,209,,201,202,56,57,58,59,,200,,207,217',
'216,210,,203,204,206,205,208,209,211,201,202,228,-38,-38,-38,-38,200',
',207,,215,210,-44,-44,-44,-44,,,,211,213,212,214,,,203,204,206,205,208',
'209,,201,202,-40,-40,-40,-40,,200,,207,217,216,,,203,204,206,205,208',
'209,,201,202,229,,,,,200,,207,,215,210,206,205,,,,201,202,211,213,212',
'214,,200,,207,,,,35,36,,,103,,104,,,,,,217,216,,,203,204,206,205,208',
'209,102,201,202,35,36,,,103,200,104,207,80,,,,37,77,,,46,,,,32,101,102',
',31,35,36,100,,103,,104,,80,,52,,37,77,,,46,,,,32,101,102,,31,35,36',
'100,,103,,104,,80,,52,,37,77,,,46,,,,32,101,102,,31,35,36,100,,103,',
'104,,80,,52,,37,77,,,46,,,,32,101,102,,31,35,36,100,,103,,104,,80,,52',
',37,77,,,46,,,,32,101,102,,31,35,36,100,,103,,104,,80,,52,,37,77,,,46',
',,,32,101,102,,31,35,36,100,,103,,104,,80,,52,,37,77,,,46,,,,32,101',
'102,,31,35,36,100,,103,,104,,80,,52,,37,77,,,46,,,,32,101,102,,31,35',
'36,100,,103,,104,,80,,52,,37,77,,,46,,,,32,101,102,,31,35,36,100,,103',
',104,,80,,52,,37,77,,,46,,,,32,101,102,,31,35,36,100,,103,,104,,80,',
'52,,37,77,,,46,,,,32,101,102,,31,35,36,100,,103,,104,,80,,52,,37,77',
',,46,35,36,,32,101,102,155,31,,,100,,,35,36,,80,103,52,,37,77,,,46,',
',,32,101,35,36,31,80,103,100,104,37,231,,,46,,52,,32,80,,,31,37,77,102',
',46,35,36,,32,103,52,104,31,80,,35,36,37,77,,,46,358,52,,32,101,102',
',31,,,100,35,36,,,,80,,52,,37,77,,,46,,80,,32,101,37,231,31,,46,100',
',,32,,,,31,52,80,,,,37,231,,,46,52,,,32,35,36,,31,103,,104,,,,,,,,52',
',,35,36,,,103,102,104,,,,,,,,,,80,,,,37,77,102,,46,,,,32,101,,,31,80',
',100,,37,77,,,46,,52,,32,101,35,36,31,,103,100,104,,,,35,36,,52,103',
',104,,,,35,36,102,,103,161,104,,,,,,102,80,,,,37,77,,,46,102,80,,32',
'101,37,77,31,,46,100,80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31',
'52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102,,103,,104,,,,,,102',
'80,,,,37,77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37,77,31',
'52,46,100,,,32,101,35,36,31,52,103,100,104,,,,35,36,,52,78,,-197,,,',
'35,36,102,,103,,104,,,,,,63,80,,,,37,77,,,46,102,80,,32,101,37,77,31',
',46,100,80,,32,,37,77,31,52,46,,,,32,101,35,36,31,52,103,100,104,,,',
'35,36,,52,103,,104,,,,35,36,102,,103,,104,,,,,,102,80,,,,37,77,,,46',
'102,80,,32,101,37,77,31,,46,100,80,,32,101,37,77,31,52,46,100,,,32,101',
'35,36,31,52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102,,103,,104',
',,,,,102,80,,,,37,77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101',
'37,77,31,52,46,100,,,32,101,35,36,31,52,103,100,104,,,,35,36,,52,103',
',104,,,,35,36,102,,103,,104,,,,,,102,80,,,,37,77,,,46,102,80,,32,101',
'37,77,31,,46,100,80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31,52',
'103,100,104,,,,35,36,,52,103,161,104,,,,35,36,102,,103,,104,,,,,,102',
'80,,,,37,77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37,77,31',
'52,46,100,,,32,101,35,36,31,52,103,100,104,,,,35,36,,52,,,,,,,35,36',
'102,,,,234,,,,35,36,,80,103,,,37,77,,,46,,80,,32,101,37,231,31,,46,100',
'80,,32,,37,231,31,52,46,,80,,32,,37,231,31,52,46,35,36,,32,103,,104',
'31,52,,35,36,,,103,,104,,52,,35,36,102,,,,,,,,,,102,80,,,,37,77,,,46',
',80,,32,101,37,77,31,,46,100,80,,32,101,37,231,31,52,46,100,,,32,,35',
'36,31,52,103,,104,,,,,,,52,,,,35,36,,,103,102,104,,,,,,,,,,80,,,,37',
'77,102,260,46,,35,36,32,101,103,,31,80,,100,,37,77,,,46,,52,,32,101',
'35,36,31,,103,100,104,,,,,,80,52,,,37,77,,,46,,102,,32,,210,,31,,,,',
'80,211,,,37,77,52,,46,,,,32,101,215,210,31,,,100,,,,211,213,212,214',
'52,203,204,206,205,208,209,,201,202,210,,,,,200,,207,211,217,216,,,203',
'204,206,205,208,209,,201,202,215,210,,,,200,,207,,211,213,212,214,203',
'204,206,205,208,209,,201,202,,210,,,,200,,207,,211,217,216,,,203,204',
'206,205,208,209,,201,202,215,210,,,,200,,207,,211,213,212,214,203,204',
'206,205,208,209,,201,202,,,,,,200,,207,,,217,216,,,203,204,206,205,208',
'209,,201,202,215,210,,,,200,,207,,211,213,212,214,203,204,206,205,208',
'209,,201,202,,,,,,200,,207,,,217,216,,,203,204,206,205,208,209,,201',
'202,215,210,,,,200,,207,301,211,213,212,214,,,,,215,210,,,,,,,,211,213',
'212,214,,,217,216,,,203,204,206,205,208,209,,201,202,,,,,,200,,207,203',
'204,206,205,208,209,,201,202,215,210,,,,200,,207,,211,213,212,214,,',
',,,,,,215,210,,,,,,,,211,213,212,214,,,203,204,206,205,208,209,,201',
'202,,,,,,200,,207,217,216,,,203,204,206,205,208,209,,201,202,215,210',
',,,200,,207,,211,213,212,214,,,,,,,,,,,,,,,,,,,,,216,,,203,204,206,205',
'208,209,,201,202,215,210,,,,200,,207,,211,213,212,214,,,,,,,,,,,,,,',
',,,,,217,216,,,203,204,206,205,208,209,,201,202,215,210,,,,200,,207',
',211,213,212,214,,,,,215,210,,,,,,,,211,213,212,214,,,217,216,,,203',
'204,206,205,208,209,,201,202,,,,,,200,,207,203,204,206,205,208,209,',
'201,202,215,210,,,,200,,207,,211,213,212,214,,,,,,,,,,,,,,,,,,,,217',
'216,,,203,204,206,205,208,209,,201,202,215,210,,,,200,,207,,211,213',
'212,214,,,,,,,,,,,,,,,,,,,,217,216,,,203,204,206,205,208,209,,201,202',
',,,,,200,,207,137,135,139,134,136,,132,140,141,148,179,,131,133,,,,',
',142,130,143,137,135,139,134,136,,132,140,141,148,146,,131,133,,138',
'144,,,142,130,143,137,135,139,134,136,,132,140,141,148,146,,131,133',
',138,144,,,142,130,143,137,135,139,134,136,,132,140,141,148,179,,131',
'133,,138,144,,,142,130,143,137,135,139,134,136,,132,140,141,148,179',
',131,133,,138,144,,,142,130,143,137,135,139,134,136,,132,140,141,148',
'146,,131,133,,138,144,,,142,130,143,,,,,,,,,,,,,,,,138,144' ]
        racc_action_table = arr = ::Array.new(2588, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,97,97,115,77,262,28,168,28,186,354,313,345,354,97,97,128,186,128',
'313,168,28,77,97,97,97,97,0,115,0,0,178,0,0,128,0,0,0,177,0,0,0,391',
'391,0,28,97,97,0,391,97,97,97,97,97,97,254,97,97,0,262,262,262,262,97',
'0,97,304,304,191,391,68,391,391,304,391,391,49,391,391,391,49,391,391',
'391,2,2,391,68,33,153,391,259,259,315,315,191,191,33,33,153,153,391',
'154,154,304,259,175,391,153,153,153,153,2,263,2,2,154,2,2,264,2,2,2',
'275,2,2,2,229,229,2,173,153,153,2,229,153,153,153,153,153,153,266,153',
'153,2,104,104,275,275,153,2,153,104,222,171,229,222,229,229,170,229',
'229,84,229,229,229,34,229,229,229,383,383,229,84,34,195,229,383,84,269',
'29,288,288,104,29,195,195,229,288,310,270,29,310,229,195,195,195,195',
'383,169,383,383,166,383,383,50,383,383,383,50,383,383,383,382,382,383',
'185,195,195,383,382,195,195,195,195,195,195,185,195,195,383,51,185,290',
'290,195,383,195,289,289,290,382,248,382,382,289,382,382,272,382,382',
'382,165,382,382,382,372,372,382,272,85,326,382,372,272,326,246,164,326',
'51,261,85,51,382,261,261,85,221,163,382,248,221,221,248,372,162,372',
'372,201,372,372,51,372,372,372,155,372,372,372,81,81,372,248,81,246',
'372,149,246,192,287,287,146,192,192,287,287,372,145,114,113,160,287',
'372,287,160,160,246,81,81,81,81,81,81,81,81,81,81,81,112,81,81,306,306',
'87,81,83,81,81,81,181,80,79,181,181,292,292,292,292,76,81,75,292,292',
'73,81,81,71,307,292,306,292,306,306,309,306,306,249,306,306,306,69,306',
'306,306,319,319,306,67,202,66,306,319,291,291,291,291,64,320,321,291',
'291,306,55,55,323,324,291,306,291,53,245,244,319,48,319,319,41,319,319',
'343,319,319,319,255,319,319,319,327,327,319,30,27,25,319,327,55,55,243',
'23,55,55,357,55,55,319,60,60,55,360,22,319,55,362,21,364,327,366,327',
'327,369,327,327,55,327,327,327,370,327,327,327,228,228,327,241,240,376',
'327,228,60,60,235,225,60,60,231,60,60,327,1,394,60,396,,327,60,,,,228',
',228,228,,228,228,60,228,228,228,,228,228,228,108,,228,,,,228,,,108',
'108,20,20,20,20,,,228,108,108,108,108,,228,294,294,294,294,294,294,',
'294,294,19,19,19,19,,294,,294,108,108,296,,108,108,108,108,108,108,296',
'108,108,105,5,5,5,5,108,,108,,105,105,9,9,9,9,,,,105,105,105,105,,,296',
'296,296,296,296,296,,296,296,7,7,7,7,,296,,296,105,105,,,105,105,105',
'105,105,105,,105,105,107,,,,,105,,105,,107,107,286,286,,,,286,286,107',
'107,107,107,,286,,286,,,,204,204,,,204,,204,,,,,,107,107,,,107,107,107',
'107,107,107,204,107,107,36,36,,,36,107,36,107,204,,,,204,204,,,204,',
',,204,204,36,,204,38,38,204,,38,,38,,36,,204,,36,36,,,36,,,,36,36,38',
',36,39,39,36,,39,,39,,38,,36,,38,38,,,38,,,,38,38,39,,38,40,40,38,,40',
',40,,39,,38,,39,39,,,39,,,,39,39,40,,39,214,214,39,,214,,214,,40,,39',
',40,40,,,40,,,,40,40,214,,40,213,213,40,,213,,213,,214,,40,,214,214',
',,214,,,,214,214,213,,214,212,212,214,,212,,212,,213,,214,,213,213,',
',213,,,,213,213,212,,213,211,211,213,,211,,211,,212,,213,,212,212,,',
'212,,,,212,212,211,,212,210,210,212,,210,,210,,211,,212,,211,211,,,211',
',,,211,211,210,,211,209,209,211,,209,,209,,210,,211,,210,210,,,210,',
',,210,210,209,,210,356,356,210,,356,,356,,209,,210,,209,209,,,209,,',
',209,209,356,,209,63,63,209,,63,,63,,356,,209,,356,356,,,356,361,361',
',356,356,63,63,356,,,356,,,317,317,,63,317,356,,63,63,,,63,,,,63,63',
'208,208,63,361,208,63,208,361,361,,,361,,63,,361,317,,,361,317,317,208',
',317,207,207,,317,207,361,207,317,208,,311,311,208,208,,,208,311,317',
',208,208,207,,208,,,208,363,363,,,,207,,208,,207,207,,,207,,311,,207',
'207,311,311,207,,311,207,,,311,,,,311,207,363,,,,363,363,,,363,311,',
',363,305,305,,363,305,,305,,,,,,,,363,,,206,206,,,206,305,206,,,,,,',
',,,305,,,,305,305,206,,305,,,,305,305,,,305,206,,305,,206,206,,,206',
',305,,206,206,205,205,206,,205,206,205,,,,215,215,,206,215,,215,,,,78',
'78,205,,78,78,78,,,,,,215,205,,,,205,205,,,205,78,215,,205,205,215,215',
'205,,215,205,78,,215,215,78,78,215,205,78,215,,,78,78,203,203,78,215',
'203,78,203,,,,371,371,,78,371,,371,,,,200,200,203,,200,,200,,,,,,371',
'203,,,,203,203,,,203,200,371,,203,203,371,371,203,,371,203,200,,371',
'371,200,200,371,203,200,371,,,200,200,199,199,200,371,199,200,199,,',
',26,26,,200,26,,26,,,,251,251,199,,251,,251,,,,,,26,199,,,,199,199,',
',199,251,26,,199,199,26,26,199,,26,199,251,,26,,251,251,26,199,251,',
',,251,251,86,86,251,26,86,251,86,,,,252,252,,251,252,,252,,,,92,92,86',
',92,,92,,,,,,252,86,,,,86,86,,,86,92,252,,86,86,252,252,86,,252,86,92',
',252,252,92,92,252,86,92,252,,,92,92,93,93,92,252,93,92,93,,,,94,94',
',92,94,,94,,,,95,95,93,,95,,95,,,,,,94,93,,,,93,93,,,93,95,94,,93,93',
'94,94,93,,94,93,95,,94,94,95,95,94,93,95,94,,,95,95,216,216,95,94,216',
'95,216,,,,100,100,,95,100,,100,,,,101,101,216,,101,,101,,,,,,100,216',
',,,216,216,,,216,101,100,,216,216,100,100,216,,100,216,101,,100,100',
'101,101,100,216,101,100,,,101,101,102,102,101,100,102,101,102,,,,103',
'103,,101,103,103,103,,,,256,256,102,,256,,256,,,,,,103,102,,,,102,102',
',,102,256,103,,102,102,103,103,102,,103,102,256,,103,103,256,256,103',
'102,256,103,,,256,256,217,217,256,103,217,256,217,,,,234,234,,256,,',
',,,,109,109,217,,,,109,,,,265,265,,217,265,,,217,217,,,217,,234,,217',
'217,234,234,217,,234,217,109,,234,,109,109,234,217,109,,265,,109,,265',
'265,109,234,265,276,276,,265,276,,276,265,109,,277,277,,,277,,277,,265',
',230,230,276,,,,,,,,,,277,276,,,,276,276,,,276,,277,,276,276,277,277',
'276,,277,276,230,,277,277,230,230,277,276,230,277,,,230,,159,159,230',
'277,159,,159,,,,,,,230,,,,158,158,,,158,159,158,,,,,,,,,,159,,,,159',
'159,158,158,159,,157,157,159,159,157,,159,158,,159,,158,158,,,158,,159',
',158,158,62,62,158,,62,158,62,,,,,,157,158,,,157,157,,,157,,62,,157',
',298,,157,,,,,62,298,,,62,62,157,,62,,,,62,62,335,335,62,,,62,,,,335',
'335,335,335,62,298,298,298,298,298,298,,298,298,295,,,,,298,,298,295',
'335,335,,,335,335,335,335,335,335,,335,335,390,390,,,,335,,335,,390',
'390,390,390,295,295,295,295,295,295,,295,295,,297,,,,295,,295,,297,390',
'390,,,390,390,390,390,390,390,,390,390,156,156,,,,390,,390,,156,156',
'156,156,297,297,297,297,297,297,,297,297,,,,,,297,,297,,,156,156,,,156',
'156,156,156,156,156,,156,156,194,194,,,,156,,156,,194,194,194,194,293',
'293,293,293,293,293,,293,293,,,,,,293,,293,,,194,194,,,194,194,194,194',
'194,194,,194,194,220,220,,,,194,,194,220,220,220,220,220,,,,,348,348',
',,,,,,,348,348,348,348,,,220,220,,,220,220,220,220,220,220,,220,220',
',,,,,220,,220,348,348,348,348,348,348,,348,348,349,349,,,,348,,348,',
'349,349,349,349,,,,,,,,,333,333,,,,,,,,333,333,333,333,,,349,349,349',
'349,349,349,,349,349,,,,,,349,,349,333,333,,,333,333,333,333,333,333',
',333,333,300,300,,,,333,,333,,300,300,300,300,,,,,,,,,,,,,,,,,,,,,300',
',,300,300,300,300,300,300,,300,300,352,352,,,,300,,300,,352,352,352',
'352,,,,,,,,,,,,,,,,,,,,352,352,,,352,352,352,352,352,352,,352,352,196',
'196,,,,352,,352,,196,196,196,196,,,,,299,299,,,,,,,,299,299,299,299',
',,196,196,,,196,196,196,196,196,196,,196,196,,,,,,196,,196,299,299,299',
'299,299,299,,299,299,193,193,,,,299,,299,,193,193,193,193,,,,,,,,,,',
',,,,,,,,,193,193,,,193,193,193,193,193,193,,193,193,332,332,,,,193,',
'193,,332,332,332,332,,,,,,,,,,,,,,,,,,,,332,332,,,332,332,332,332,332',
'332,,332,332,,,,,,332,,332,268,268,268,268,268,,268,268,268,268,268',
',268,268,,,,,,268,268,268,180,180,180,180,180,,180,180,180,180,180,',
'180,180,,268,268,,,180,180,180,61,61,61,61,61,,61,61,61,61,61,,61,61',
',180,180,,,61,61,61,267,267,267,267,267,,267,267,267,267,267,,267,267',
',61,61,,,267,267,267,82,82,82,82,82,,82,82,82,82,82,,82,82,,267,267',
',,82,82,82,250,250,250,250,250,,250,250,250,250,250,,250,250,,82,82',
',,250,250,250,,,,,,,,,,,,,,,,250,250' ]
        racc_action_check = arr = ::Array.new(2588, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   490,    84,   nil,   nil,   507,   nil,   539,   nil,   517,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   485,
   463,   447,   428,   417,   nil,   428,  1304,   425,     1,   146,
   388,   nil,   nil,    84,   153,   nil,   675,   nil,   700,   725,
   750,   395,   nil,   nil,   nil,   nil,   nil,   nil,   413,    42,
   171,   231,   nil,   411,   nil,   402,   nil,   nil,   nil,   nil,
   445,  2453,  1832,   950,   386,   nil,   368,   366,    66,   359,
   nil,   345,   nil,   359,   nil,   339,   337,    -1,  1180,   330,
   346,   299,  2497,   339,   140,   238,  1361,   337,   nil,   nil,
   nil,   nil,  1381,  1428,  1438,  1448,   nil,    -2,   nil,   nil,
  1505,  1515,  1562,  1572,   145,   561,   nil,   615,   507,  1649,
   nil,   nil,   328,   297,   296,    -8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   307,   261,   nil,   nil,   297,
   nil,   nil,   nil,    84,    93,   274,  1954,  1811,  1785,  1768,
   315,   nil,   264,   257,   228,   242,   184,   nil,    -3,   178,
   138,   133,   nil,   109,   nil,   102,   nil,    16,    20,   nil,
  2431,   305,   nil,   nil,   nil,   194,    -8,   nil,   nil,   nil,
   nil,    48,   303,  2324,  1999,   170,  2262,   nil,   nil,  1294,
  1247,   228,   328,  1227,   650,  1160,  1113,  1022,   997,   900,
   875,   850,   825,   800,   775,  1170,  1495,  1629,   nil,   nil,
  2044,   272,   146,   nil,   nil,   472,   nil,   nil,   470,   127,
  1721,   462,   nil,   nil,  1639,   471,   nil,   nil,   nil,   nil,
   474,   467,   nil,   404,   376,   404,   266,   nil,   242,   369,
  2519,  1314,  1371,   nil,    34,   400,  1582,   nil,   nil,    82,
   nil,   265,    -2,   108,   112,  1659,   134,  2475,  2409,   172,
   180,   nil,   226,   nil,   nil,   100,  1701,  1711,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   579,   256,   123,   180,
   175,   341,   303,  1976,   486,  1886,   540,  1931,  1842,  2279,
  2172,   nil,   nil,   nil,    66,  1096,   341,   360,   nil,   366,
   160,  1032,   nil,     0,   nil,    84,   nil,   980,   nil,   384,
   374,   388,   nil,   391,   399,   nil,   227,   427,   nil,   nil,
   nil,   nil,  2369,  2127,   nil,  1864,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   409,   nil,     4,   nil,   nil,  2061,  2106,
   nil,   nil,  2217,   nil,   -20,   nil,   925,   435,   nil,   nil,
   442,   967,   445,  1050,   447,   nil,   449,   nil,   nil,   436,
   433,  1237,   256,   nil,   nil,   nil,   468,   nil,   nil,   nil,
   nil,   nil,   213,   170,   nil,   nil,   nil,   nil,   nil,   nil,
  1909,    41,   nil,   nil,   482,   nil,   484,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -206,  -241,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
  -241,   -39,   -41,   -42,   -43,   -45,   -97,  -241,  -178,  -241,
   -74,   -96,   -98,  -221,  -239,  -124,  -241,  -129,  -241,  -241,
  -241,  -241,  -177,  -181,  -182,  -183,  -185,  -186,  -241,  -241,
  -198,  -241,  -229,  -241,    -4,  -241,   -46,   -47,   -48,   -49,
  -241,  -119,  -241,  -241,   -53,   -54,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -97,  -241,  -239,
  -221,  -109,  -109,   -77,  -206,  -206,  -241,  -241,   -73,  -197,
  -198,   -75,  -241,  -241,  -241,  -241,  -125,  -241,  -141,  -142,
  -241,  -241,  -241,  -241,  -241,  -241,  -134,  -241,  -241,  -241,
  -187,  -188,  -190,  -206,  -206,  -206,  -199,  -201,  -202,  -203,
  -204,  -205,   401,   -37,   -38,   -39,   -40,   -44,   -97,   -36,
   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,
   -31,   -32,   -33,   -34,   -35,  -227,  -112,  -113,  -114,  -241,
  -117,  -118,  -120,  -241,  -241,   -52,   -56,  -241,  -241,  -241,
  -241,  -224,   -24,   -34,   -94,  -227,  -241,   -92,   -97,   -99,
  -100,  -101,  -102,  -103,  -104,  -105,  -110,  -114,  -227,  -112,
  -119,  -241,   -80,   -81,   -83,  -206,  -241,   -89,   -90,   -97,
  -221,  -241,  -241,  -106,  -108,  -241,  -107,  -126,  -127,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -153,  -160,
  -241,  -241,  -241,  -232,  -233,  -241,  -236,  -237,  -241,  -241,
  -241,   -97,  -171,  -172,  -241,  -241,  -178,  -179,  -180,  -184,
  -241,  -241,  -208,  -207,  -206,  -241,  -241,  -215,  -241,  -241,
  -228,  -241,  -241,  -240,   -50,  -226,  -241,  -225,   -55,  -241,
  -123,  -241,  -222,  -226,  -241,   -95,  -241,  -228,  -109,  -241,
  -227,   -78,  -241,   -85,   -86,  -241,  -241,  -241,   -79,  -131,
  -226,  -238,  -128,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -154,  -155,  -156,  -157,  -158,  -159,  -161,
  -162,  -163,  -222,  -230,  -241,  -241,    -5,  -241,  -133,  -241,
  -137,  -241,  -165,  -241,  -169,  -227,  -174,  -241,  -189,  -241,
  -241,  -227,  -211,  -214,  -241,  -217,  -241,  -241,  -200,  -216,
   -72,  -121,  -116,  -115,   -51,   -57,  -122,  -130,  -223,   -69,
   -93,   -70,  -111,  -227,   -71,  -241,   -82,   -84,   -87,   -88,
  -231,  -234,  -235,  -132,  -137,  -136,  -241,  -241,  -164,  -166,
  -241,  -241,  -241,  -241,  -226,  -176,  -241,  -192,  -209,  -241,
  -228,  -241,  -241,  -218,  -219,  -220,  -241,  -196,   -91,   -76,
  -135,  -138,  -241,  -241,  -170,  -173,  -175,  -191,  -210,  -212,
  -213,  -241,  -194,  -195,  -241,  -140,  -241,  -168,  -193,  -139,
  -167 ]

racc_goto_table = [
    28,     2,    28,    42,   224,    42,    54,    65,   106,   233,
   113,   114,   235,   121,   116,    44,   174,    44,    43,   111,
    43,   249,   167,    96,   307,   309,     3,   322,   145,    87,
    25,    88,    25,   165,   178,   176,   176,    83,   312,   355,
   123,   266,   181,   191,   311,   129,   127,   331,   126,   154,
    24,   127,    24,   126,   269,    28,   346,   124,    42,   232,
    28,   197,   124,    42,   160,    55,    60,   241,   244,   315,
    44,   264,   192,    43,   112,    44,   164,   324,    43,   115,
   245,   171,   363,   380,   170,    25,   329,   188,   188,   221,
    25,   320,   321,    64,   373,   222,    44,     1,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   236,
    24,   175,    42,   nil,   nil,   366,   nil,   nil,    34,   359,
    34,   nil,   nil,   376,    44,   nil,   nil,    43,   nil,   nil,
   nil,   172,   nil,   314,   316,   nil,   nil,   235,   258,   242,
   242,   247,   nil,   275,   259,   261,   345,   270,   nil,   nil,
   nil,   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   284,   285,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   394,   396,
   nil,   nil,   nil,   nil,   nil,   nil,   282,   nil,   188,   nil,
   nil,   362,   nil,   nil,   nil,   nil,   nil,   369,   nil,   nil,
   174,   nil,   nil,   nil,   351,   nil,   340,   nil,   121,   328,
   121,   318,   nil,   nil,   314,   nil,   nil,   nil,   nil,   378,
   343,   342,   176,   nil,   nil,   nil,   nil,   239,    28,    28,
   236,    42,    42,    42,   236,   nil,   nil,    42,   nil,   nil,
   nil,   nil,   nil,    44,    44,    44,    43,    43,    43,    44,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,    25,    25,
   nil,   nil,   nil,   386,   384,   171,   235,   nil,   170,   nil,
   325,   nil,   nil,   nil,   nil,   188,   nil,   nil,    24,    24,
    44,   nil,   nil,    43,    23,   nil,    23,   374,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   175,   nil,   nil,   365,    45,
   nil,    45,   nil,   nil,   nil,   nil,    28,   nil,   nil,    42,
    54,   236,   nil,   nil,    42,   172,   nil,   nil,   nil,    28,
   nil,    44,    42,   nil,    43,   381,    44,    28,   nil,    43,
    42,   nil,   nil,   nil,    44,   nil,    25,    43,   nil,    23,
   nil,   nil,    44,   nil,    23,    43,    34,    34,   239,    25,
   nil,   nil,   239,   nil,    45,   nil,    24,    25,   nil,    45,
   nil,   236,   nil,   236,    42,   169,    42,   nil,    22,    24,
    22,   nil,    28,   391,   nil,    42,    44,    24,    44,    43,
    45,    43,    28,    28,   nil,    42,    42,    44,   227,   nil,
    43,    28,   nil,   237,    42,    54,   nil,    44,    44,   nil,
    43,    43,    25,    21,   nil,    21,    44,   nil,    45,    43,
   nil,   nil,    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,    24,    22,    34,   nil,   nil,   nil,    22,   239,
   nil,   nil,    24,    24,   nil,   nil,   nil,    34,   nil,   nil,
   nil,    24,   nil,   nil,   nil,    34,   nil,   nil,   nil,   173,
   nil,   nil,   187,   187,   nil,   nil,   nil,   nil,   125,   nil,
   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,   nil,   239,
   nil,   239,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    34,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,
   nil,   nil,    23,    23,   237,   nil,   nil,   nil,   237,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    45,    45,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   169,
   nil,   nil,   nil,   187,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,   nil,
    23,   nil,   nil,   nil,   nil,   237,    22,    22,   238,   nil,
   nil,   nil,   238,    23,   nil,    45,   nil,   nil,   nil,   nil,
    45,    23,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,
   nil,    21,    21,   173,   nil,    97,   nil,   105,   107,   108,
   187,   nil,   nil,   nil,   nil,   237,   nil,   237,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
    45,   153,    45,   nil,   nil,   nil,    23,    23,   nil,   nil,
   nil,    45,   nil,   nil,    22,    23,   nil,   nil,   nil,   238,
   nil,    45,    45,   nil,   nil,   nil,   nil,    22,   nil,   nil,
    45,   193,   194,   195,   196,    22,   nil,   nil,   nil,   218,
   219,   220,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   238,
    21,   238,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,    97,   283,
   nil,   nil,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   332,   333,   nil,   nil,   nil,   335,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   348,   349,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   352,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   390 ]

racc_goto_check = [
    35,     2,    35,    34,    86,    34,     4,    31,    62,    71,
    40,    40,    69,    65,    79,    36,    37,    36,    38,    73,
    38,    44,    53,    60,     5,     5,     3,    83,    45,    35,
    28,     6,    28,    43,    43,    56,    56,    47,    67,    63,
    22,    44,    48,    48,    66,    22,    10,    59,     8,    29,
    27,    10,    27,     8,    44,    35,    49,     6,    34,    70,
    35,    61,     6,    34,    29,    23,    23,    75,    75,    72,
    36,    42,    29,    38,    74,    36,    41,    76,    38,    77,
    78,    35,    33,    63,    34,    28,    80,    34,    34,    29,
    28,    81,    82,    30,    84,    85,    36,     1,   nil,    38,
   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,    35,
    27,    28,    34,   nil,   nil,     5,   nil,   nil,    55,    67,
    55,   nil,   nil,     5,    36,   nil,   nil,    38,   nil,   nil,
   nil,    27,   nil,    69,    71,   nil,   nil,    69,    31,     3,
     3,     3,   nil,    48,    29,    29,    44,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    83,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    65,    65,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,     5,
   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,    34,   nil,
   nil,    44,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,
    37,   nil,   nil,   nil,    86,   nil,    53,   nil,    65,    79,
    65,    73,   nil,   nil,    69,   nil,   nil,   nil,   nil,    44,
    43,    56,    56,   nil,   nil,   nil,   nil,    55,    35,    35,
    35,    34,    34,    34,    35,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,    36,    36,    36,    38,    38,    38,    36,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,    28,    28,
   nil,   nil,   nil,    71,    69,    35,    69,   nil,    34,   nil,
     3,   nil,   nil,   nil,   nil,    34,   nil,   nil,    27,    27,
    36,   nil,   nil,    38,    26,   nil,    26,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,    31,    39,
   nil,    39,   nil,   nil,   nil,   nil,    35,   nil,   nil,    34,
     4,    35,   nil,   nil,    34,    27,   nil,   nil,   nil,    35,
   nil,    36,    34,   nil,    38,    62,    36,    35,   nil,    38,
    34,   nil,   nil,   nil,    36,   nil,    28,    38,   nil,    26,
   nil,   nil,    36,   nil,    26,    38,    55,    55,    55,    28,
   nil,   nil,    55,   nil,    39,   nil,    27,    28,   nil,    39,
   nil,    35,   nil,    35,    34,    26,    34,   nil,    25,    27,
    25,   nil,    35,     2,   nil,    34,    36,    27,    36,    38,
    39,    38,    35,    35,   nil,    34,    34,    36,    26,   nil,
    38,    35,   nil,    26,    34,     4,   nil,    36,    36,   nil,
    38,    38,    28,    24,   nil,    24,    36,   nil,    39,    38,
   nil,   nil,    28,    28,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    28,    27,    25,    55,   nil,   nil,   nil,    25,    55,
   nil,   nil,    27,    27,   nil,   nil,   nil,    55,   nil,   nil,
   nil,    27,   nil,   nil,   nil,    55,   nil,   nil,   nil,    25,
   nil,   nil,    25,    25,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,    55,
   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    55,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
   nil,   nil,    26,    26,    26,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,    39,
   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
    26,   nil,   nil,   nil,   nil,    26,    25,    25,    25,   nil,
   nil,   nil,    25,    26,   nil,    39,   nil,   nil,   nil,   nil,
    39,    26,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,    24,    24,    25,   nil,    32,   nil,    32,    32,    32,
    25,   nil,   nil,   nil,   nil,    26,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
    39,    32,    39,   nil,   nil,   nil,    26,    26,   nil,   nil,
   nil,    39,   nil,   nil,    25,    26,   nil,   nil,   nil,    25,
   nil,    39,    39,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    39,    32,    32,    32,    32,    25,   nil,   nil,   nil,    32,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,    25,
    24,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,    32,    32,
   nil,   nil,    32,    32,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    32,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32 ]

racc_goto_pointer = [
   nil,    97,     1,    26,     4,  -204,     2,   nil,    -7,   nil,
    -9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -15,    46,   403,   368,   284,    50,    30,   -14,
    67,   -19,   599,  -233,     3,     0,    15,   -65,    18,   299,
   -39,    -5,   -93,   -48,  -124,   -33,   nil,     9,   -42,  -216,
   nil,   nil,   nil,   -59,   nil,   118,   -46,   nil,   nil,  -203,
   -13,   -36,   -31,  -271,   nil,   -38,  -186,  -192,   nil,   -97,
   -50,  -100,  -165,   -29,    26,   -46,  -167,    28,   -35,   -37,
  -162,  -152,  -151,  -216,  -232,    -9,  -100,   nil ]

racc_goto_default = [
   nil,   nil,   306,   182,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   147,    20,   nil,    74,    71,    66,    70,    73,   nil,
   nil,    98,   156,   256,    67,    68,    69,    72,    75,    76,
    27,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   183,
   272,   184,   186,   nil,   166,    79,   150,   149,   151,   152,
   nil,   nil,   nil,   nil,    99,    47,   nil,   nil,   313,    41,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   117,   nil,   nil,   nil,   nil,   nil,   nil,   225 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_50,
  5, 84, :_reduce_51,
  3, 84, :_reduce_52,
  2, 84, :_reduce_53,
  1, 100, :_reduce_54,
  3, 100, :_reduce_55,
  1, 99, :_reduce_56,
  3, 99, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_69,
  5, 76, :_reduce_70,
  5, 76, :_reduce_71,
  5, 88, :_reduce_72,
  2, 77, :_reduce_73,
  1, 116, :_reduce_74,
  2, 116, :_reduce_75,
  6, 78, :_reduce_76,
  2, 78, :_reduce_77,
  3, 117, :_reduce_78,
  3, 117, :_reduce_79,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_82,
  1, 119, :_reduce_none,
  3, 119, :_reduce_84,
  1, 120, :_reduce_85,
  1, 120, :_reduce_86,
  3, 121, :_reduce_87,
  3, 121, :_reduce_88,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_91,
  1, 111, :_reduce_92,
  3, 111, :_reduce_93,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_96,
  1, 104, :_reduce_97,
  1, 105, :_reduce_98,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 79, :_reduce_106,
  3, 79, :_reduce_107,
  3, 89, :_reduce_108,
  0, 113, :_reduce_109,
  1, 113, :_reduce_110,
  3, 113, :_reduce_111,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_115,
  3, 128, :_reduce_116,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_119,
  1, 115, :_reduce_120,
  3, 115, :_reduce_121,
  4, 108, :_reduce_122,
  3, 108, :_reduce_123,
  1, 96, :_reduce_124,
  2, 96, :_reduce_125,
  2, 130, :_reduce_126,
  1, 131, :_reduce_127,
  2, 131, :_reduce_128,
  1, 106, :_reduce_129,
  4, 94, :_reduce_130,
  4, 94, :_reduce_131,
  5, 82, :_reduce_132,
  4, 82, :_reduce_133,
  2, 81, :_reduce_134,
  5, 132, :_reduce_135,
  4, 132, :_reduce_136,
  0, 133, :_reduce_none,
  2, 133, :_reduce_138,
  4, 133, :_reduce_139,
  3, 133, :_reduce_140,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_143,
  3, 102, :_reduce_144,
  3, 102, :_reduce_145,
  3, 102, :_reduce_146,
  3, 102, :_reduce_147,
  3, 102, :_reduce_148,
  3, 102, :_reduce_149,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  2, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  3, 102, :_reduce_159,
  2, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  3, 102, :_reduce_163,
  5, 80, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 97, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 83, :_reduce_190,
  6, 85, :_reduce_191,
  5, 85, :_reduce_192,
  7, 86, :_reduce_193,
  6, 86, :_reduce_194,
  6, 87, :_reduce_195,
  5, 87, :_reduce_196,
  1, 110, :_reduce_197,
  1, 110, :_reduce_198,
  1, 147, :_reduce_199,
  3, 147, :_reduce_200,
  1, 149, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_none,
  0, 73, :_reduce_206,
  0, 151, :_reduce_207,
  1, 145, :_reduce_none,
  3, 145, :_reduce_209,
  4, 145, :_reduce_210,
  1, 152, :_reduce_none,
  3, 152, :_reduce_212,
  3, 153, :_reduce_213,
  1, 153, :_reduce_214,
  1, 148, :_reduce_none,
  2, 148, :_reduce_216,
  1, 146, :_reduce_none,
  2, 146, :_reduce_218,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 95, :_reduce_221,
  3, 107, :_reduce_222,
  4, 107, :_reduce_223,
  2, 107, :_reduce_224,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_228,
  1, 135, :_reduce_229,
  3, 134, :_reduce_230,
  4, 134, :_reduce_231,
  2, 134, :_reduce_232,
  1, 155, :_reduce_none,
  3, 155, :_reduce_234,
  3, 156, :_reduce_235,
  1, 157, :_reduce_236,
  1, 157, :_reduce_237,
  4, 125, :_reduce_238,
  1, 98, :_reduce_none,
  4, 98, :_reduce_240 ]

racc_reduce_n = 241

racc_shift_n = 401

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::BlockExpression, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::BlockExpression)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 694)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_213(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_214(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_216(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_221(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_224(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_228(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_229(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_230(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_231(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 753)
  def _reduce_232(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'grammar.ra', 758)
  def _reduce_234(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_235(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_236(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_237(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 774)
  def _reduce_238(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'grammar.ra', 779)
  def _reduce_240(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
