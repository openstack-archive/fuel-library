#!/bin/bash

if ${DEBUG}; then
  DOCKER="docker -D"
else
  DOCKER="docker"
fi

function show_usage {
  echo "Usage:"
  echo "  $0 command"
  echo
  echo "Available commands: (Note: work in progress)"
  echo "  help: show this message"
  echo "  build: create all Docker containers"
  echo "  start: start all Docker containers"
  echo "  restart: restart one or more Docker containers"
  echo "  stop: stop one or more Docker containers"
  echo "  shell: start a shell or run a command in a Docker container"
  echo "  upgrade: upgrade deployment"
  echo "  destroy: destroy one or more containers"
  echo "  check: check of container is ready"
}
function debug {
  if $DEBUG; then
    echo $@
  fi
}
function build_image {
  ${DOCKER} build -t $2 $1
}

function build_storage_containers {
  build_image $SOURCE_DIR/storage-dump storage/dump
  build_image $SOURCE_DIR/storage-repo storage/repo
  build_image $SOURCE_DIR/storage-puppet storage/puppet
  build_image $SOURCE_DIR/storage-log storage/log
}

function retry_checker {
  tries=0
  echo "checking with command \"$*\""
  until eval $*; do
     rc=$?
     ((tries++))
     echo "try number $tries"
     echo "return code is $rc"
     if [ $tries -gt 240 ];then
        failure=1
     break
  fi
     sleep 1
  done
}

function get_service_credentials {
  credentialfile=$(mktemp /tmp/servicepws.XXXXX)
  get_service_credentials.py $ASTUTE_YAML > $credentialfile
  . $credentialfile
  rm -f $credentialfile
}

function check_ready {
  #Uses a custom command to ensure a container is ready
  get_service_credentials
  failure=0
  echo "checking container $1"
  case $1 in
      nailgun) retry_checker '[ $(curl --connect-timeout 1 -s -w %{http_code} http://127.0.0.1:8000/api/version -o /dev/null) = "200" ]'  ;;
      ostf) retry_checker '[ $(curl --connect-timeout 1 -s -w '%{http_code}' http://127.0.0.1:8000/ostf/not_found -o /dev/null) = "404" ]' ;;
      cobbler) retry_checker "shell_container cobbler ps aux | grep -q 'cobblerd -F'" ;;
      rabbitmq) retry_checker "curl -f -L -i  -u \"$astute_user:$astute_password\" http://127.0.0.1:15672/api/nodes  1>/dev/null 2>&1"
                retry_checker "curl -f -L -u \"$mcollective_user:$mcollective_password\" -s http://127.0.0.1:15672/api/exchanges | grep -qw 'mcollective_broadcast'"
                retry_checker "curl -f -L -u \"$mcollective_user:$mcollective_password\" -s http://127.0.0.1:15672/api/exchanges | grep -qw 'mcollective_directed'" ;;
      postgres) retry_checker "PGPASSWORD=$postgres_nailgun_password shell_container postgres psql -h 127.0.0.1 -U \"$postgres_nailgun_user\" \"$postgres_nailgun_dbname\" -c '\copyright' 2>&1 1>/dev/null" ;;
      astute) retry_checker "shell_container astute ps aux | grep -q 'astuted'"
              retry_checker "curl -f -L -u \"$astute_user:$astute_password\" -s http://127.0.0.1:15672/api/exchanges | grep -qw 'nailgun'"
              retry_checker "curl -f -L -u \"$astute_user:$astute_password\" -s http://127.0.0.1:15672/api/exchanges | grep -qw 'naily_service'" ;;
      rsync) retry_checker "shell_container rsync netstat -ntl | grep -q 873" ;;
      rsyslog) retry_checker "shell_container rsyslog netstat -nl | grep -q 514" ;;
      mcollective) retry_checker "shell_container mcollective ps aux | grep -q mcollectived" ;;
      nginx) retry_checker "shell_container nginx ps aux | grep -q nginx"  ;;
      *) echo "No defined test for determining if $1 is ready."
                ;;
  esac

  if [ $failure -eq 1 ]; then
    echo "ERROR: $1 failed to start."
  else
    echo "$1 is ready."
  fi
}


function run_storage_containers {
  #Run storage containers once
  #Note: storage containers exit, but keep volumes available

  #Remove existing ones if they exist
  #kill_storage_containers
  ${DOCKER} run -d ${CONTAINER_VOLUMES[$DUMP_CNT]} --name "$DUMP_CNT" storage/dump || true
  ${DOCKER} run -d ${CONTAINER_VOLUMES[$REPO_CNT]} --name "$REPO_CNT" storage/repo || true
  ${DOCKER} run -d ${CONTAINER_VOLUMES[$PUPPET_CNT]} --name "$PUPPET_CNT" storage/puppet || true
  #${DOCKER} run -d ${CONTAINER_VOLUMES[$LOG_CNT]} --name "$LOG_CNT" storage/log || true
}

function kill_storage_containers {
  containers=$(${DOCKER} ps -a | egrep "($DUMP_CNT|$REPO_CNT|$PUPPET_CNT)" | cut -d' ' -f1)
  if [ -n "$containers" ]; then
    ${DOCKER} rm $containers || true
  fi
}
function import_images {
  #Imports images with xz, gzip, or simple tar format
  for image_archive in $@; do
    if [ ! -f $image_archive ]; then
      echo "Warning: $image_archive does not exist. Skipping..."
      continue
    fi
    debug "Importing $image_archive"
    image="$(echo $image_archive | cut -d. -f1)"
    if egrep -q "gz\$" <<< "$image_archive"; then
      zcat "$image_archive" | ${DOCKER} load
    elif egrep -q "xz\$" <<< "$image_archive"; then
      #xz -dkc "$image_archive" | ${DOCKER} load - "${IMAGE_PREFIX}/${image}"
      xz -dkc "$image_archive" | ${DOCKER} load
    else
      #try to just import
      cat "$image_archive" | ${DOCKER} load
    fi
  done
}

function export_containers {
  #--trim option removes $CNT_PREFIX from container name when exporting
  if [[ "$1" == "--trim" ]]; then
    trim=true
    shift
  else
    trim=false
  fi

  for image in $@; do
    [ $trim ] && image=$(sed "s/${CNT_PREFIX}//" <<< "$image")
    ${DOCKER} export $1 | gzip -c > "${image}.tar.gz"
  done
}

function commit_container {
  container_name="${CONTAINER_NAMES[$1]}"
  image="$IMAGE_PREFIX/$1"
  ${DOCKER} commit $container_name $image
}
function start_container {
  if [ -z "$1" ]; then
    echo "Must specify a container name" 1>&2
    exit 1
  fi
  image_name="$IMAGE_PREFIX/$1"
  container_name=${CONTAINER_NAMES[$1]}
  if container_created "$container_name"; then
    pre_start_hooks $1
    if is_running "$container_name"; then
      if is_ghost "$container_name"; then
        restart_container $1
      else
        echo "$container_name is already running."
      fi
    else
      ${DOCKER} start $container_name
    fi
    post_start_hooks $1
    if [ "$2" = "--attach" ]; then
      attach_container $container_name
    fi
  else
    first_run_container "$1" $2
  fi

}

function attach_container {
  echo "Attaching to container $container_name..."
  ${DOCKER} attach $1
}

function shell_container {
  id=$(get_container_id "$1")
  if [ $? -ne 0 ]; then
    echo "Could not get docker ID for $container. Is it running?" 1>&2
    return 1
  fi
  if [ -z "$2" ]; then
    command="/bin/bash"
  else
    shift
    command=("$@")
  fi
  lxc-attach --name "$id" -- "${command[@]}"
}

function stop_container {
  if [[ "$1" == 'all' ]]; then
    ${DOCKER} stop ${CONTAINER_NAMES[$1]}
  else
    for container in $@; do
      echo "Stopping $container..."
      ${DOCKER} stop ${CONTAINER_NAMES[$container]}
    done
  fi
}

function destroy_container {
  if [[ "$1" == 'all' ]]; then
    stop_container all
    ${DOCKER} rm ${CONTAINER_NAMES[@]}
  else
    for container in $@; do
      stop_container $container
      ${DOCKER} rm ${CONTAINER_NAMES[$container]}
      if [ $? -ne 0 ]; then
        #This happens because devicemapper glitched
        #Try to unmount all devicemapper mounts manually and try again
        echo "Destruction of container $container failed. Trying workaround..."
        id=$(${DOCKER} inspect -f='{{.ID}}' ${CONTAINER_NAMES[$container]})
        if [ -z $id ]; then
          echo "Could not get docker ID for $container" 1>&2
          return 1
        fi
        umount -l $(grep "$id" /proc/mounts | awk '{print $2}' | sort -r)
        #Try to delete again
        ${DOCKER} rm ${CONTAINER_NAMES[$container]}
        if [ $? -ne 0 ];then
          echo "Workaround failed. Unable to destroy container $container."
        fi
      fi
    done
  fi
}

function logs {
  ${DOCKER} logs ${CONTAINER_NAMES[$1]}
}



function restart_container {
  ${DOCKER} restart ${CONTAINER_NAMES[$1]}
}

function container_lookup {
  echo ${CONTAINER_NAMES[$1]}
}

function get_container_id {
  #Try to get ID from container short name first
  id=$(${DOCKER} inspect -f='{{.ID}}' ${CONTAINER_NAMES[$1]} 2>/dev/null)
  if [ -z "$id" ]; then
     #Try to get ID short ID, long ID, or container name
     id=$(${DOCKER} inspect -f='{{.ID}}' "$1")
     if [ -z "$id" ]; then
       echo "Could not get docker ID for container $1. Is it running?" 1>&2
       return 1
     fi
  fi
  echo "$id"
}
function container_created {
  ${DOCKER} ps -a | grep -q $1
  return $?
}
function is_ghost {
  LANG=C ${DOCKER} ps | grep $1 | grep -q Ghost
  return $?
}
function is_running {
  ${DOCKER} ps | grep -q $1
  return $?
}
function first_run_container {

  opts="${CONTAINER_OPTIONS[$1]} ${CONTAINER_VOLUMES[$1]}"
  container_name="${CONTAINER_NAMES[$1]}"
  image="$IMAGE_PREFIX/$1_$VERSION"
  if ! is_running $container_name; then
      pre_setup_hooks $1
      ${DOCKER} run $opts $BACKGROUND --name=$container_name $image
      post_setup_hooks $1
  else
      echo "$container_name is already running."
  fi
  if [ "$2" = "--attach" ]; then
      attach_container $container_name
  fi
  return 0
}

function pre_setup_hooks {
  return 0
}

function pre_start_hooks {
  return 0
}

function post_setup_hooks {
  case $1 in
    cobbler)   setup_dhcrelay_for_cobbler
               ;;
    rsyslog)   remangle_syslog
               ;;
    nginx)     remangle_nginx
               ;;
    *)         ;;
  esac
}
function post_start_hooks {
  case $1 in
    cobbler)   setup_dhcrelay_for_cobbler
               ;;
    *)         ;;
  esac
}
function remangle_port {
  proto=$1
  port=$2
  admin_interface=$(grep interface: $ASTUTE_YAML | cut -d':' -f2 | tr -d ' ')
  #Use facter and ipcalc to get admin network CIDR
  admin_net_ip=$(facter "ipaddress_${admin_interface}")
  admin_net_netmask=$(facter "netmask_$admin_interface")
  eval $(ipcalc -np "$admin_net_ip" "$admin_net_netmask")
  iptables -t nat -I POSTROUTING 1 -s "$NETWORK/$PREFIX" -p $proto -m $proto --dport $port -j ACCEPT
  iptables -I FORWARD -i $admin_interface -o docker0  -m state --state NEW -p $proto  -m $proto --dport $port -j ACCEPT
  service iptables save
}

function remangle_nginx {
  #Necessary to forward packets to rsyslog with correct src ip
  remangle_port tcp 8000
  remangle_port tcp 8080
}

function remangle_syslog {
  #Necessary to forward packets to rsyslog with correct src ip
  remangle_port tcp 514
  remangle_port udp 514
}

function setup_dhcrelay_for_cobbler {
  if ! is_running "cobbler"; then
    echo "ERROR: Cobbler container isn't running." 1>&2
    exit 1
  fi
  cobbler_ip=$(${DOCKER} inspect --format='{{.NetworkSettings.IPAddress}}' ${CONTAINER_NAMES["cobbler"]})
  admin_interface=$(grep interface: $ASTUTE_YAML | cut -d':' -f2 | tr -d ' ')
  cat > /etc/sysconfig/dhcrelay << EOF
# Command line options here
DHCRELAYARGS=""
# DHCPv4 only
INTERFACES="$admin_interface docker0"
# DHCPv4 only
DHCPSERVERS="$cobbler_ip"
EOF
  rpm -q dhcp 2>&1 > /dev/null || yum --quiet -y install dhcp
  chkconfig dhcrelay on
  service dhcrelay restart
}

function allow_all_docker_traffic {
  iptables -A POSTROUTING -t nat  -o docker0  -j MASQUERADE
}
