#!/bin/bash

confdir="<%= @config_dir %>"
. "$confdir/config"
. "<%= @share_dir %>/functions"
DEBUG=true

if [ -z "$1" ] || [ "$1" = "help" ]; then
  echo "Please specify a command."
  show_usage
  exit 1
fi

if [ -z "$2" ] || [ "$2" = "all" ]; then
  container="all"
else
  container=$2
fi

container_seq="postgres rabbitmq rsync astute rsyslog keystone nailgun ostf nginx cobbler mcollective"

if [ "$1" == "build" ]; then
  if [ "$container" = "storage" ]; then
    build_storage_containers
    run_storage_containers
  elif [ "$container" = "all" ];then
    #Step 1: prepare storage containers
    build_storage_containers
    run_storage_containers

    #Step 2: import app images
    import_images ${SOURCE_IMAGES[@]}

    #Prepare iptables just in case ICC is broken
    allow_all_docker_traffic

    #Step 3: Launch all in order
    for service in $container_seq; do
      start_container $service
      sleep 4
    done

    #Step 4: Wait for key apps to be ready
    echo "Waiting for applications to be ready"
    for service in $container_seq; do
      check_ready $service
    done

    #Step 5: Test deployment TODO(mattymo)
    #run_tests $apps
  else
    import_images ${SOURCE_IMAGES[$container]}
    start_container $container
  fi
elif [ "$1" == "start" ]; then
  if [ "$container" = "all" ];then

    for service in $container_seq; do
      start_container $service
      #supervisorctl start $service
      check_ready $service
      sleep 4
    done
  else
    shift 2
    start_container $container $@
    check_ready $container
  fi
elif [ "$1" == "check" ]; then
  if [ "$container" = "all" ];then
    for service in $container_seq; do
      check_ready $service
    done
  else
    check_ready $container
  fi
elif [ "$1" == "list" ]; then
  shift 1
  list_containers "$@"
elif [ "$1" == "copy" ]; then
  shift 1
  copy_files "$@"
elif [ "$1" == "restart" ]; then
  shift 2
  restart_container $container $@
elif [ "$1" == "stop" ]; then
  shift 2
  stop_container $container $@
elif [ "$1" == "revert" ]; then
  shift 2
  revert_container $container $@
elif [ "$1" == "shell" ]; then
  shift 2
  shell_container $container "$@"
elif [ "$1" == "upgrade" ]; then
  shift 2
  upgrade_container $container $@
elif [ "$1" == "backup" ]; then
  shift 2
  backup_container $container $@
elif [ "$1" == "destroy" ]; then
  shift 2
  destroy_container $container $@
elif [ "$1" == "logs" ]; then
  logs $container
else
  echo "Invalid selection."
  show_usage
fi
