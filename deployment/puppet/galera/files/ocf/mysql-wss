#!/bin/bash
# Author: Bartosz Kupidura (bkupidura@mirantis.com)
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs
#######################################################################
# Fill in some defaults if no values are specified
HOSTOS=`uname`
OCF_RESKEY_binary_default="/usr/bin/mysqld_safe"
OCF_RESKEY_client_binary_default="/usr/bin/mysql"
OCF_RESKEY_config_default="/etc/my.cnf"
OCF_RESKEY_datadir_default="/var/lib/mysql"
OCF_RESKEY_user_default="mysql"
OCF_RESKEY_group_default="mysql"
OCF_RESKEY_log_default="/var/log/mysqld.log"
OCF_RESKEY_pid_default="/var/run/mysql/mysqld.pid"
OCF_RESKEY_socket_default="/var/lib/mysql/mysql.sock"
OCF_RESKEY_test_user_default="root"
OCF_RESKEY_test_passwd_default=""
OCF_RESKEY_additional_parameters_default=""

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
MYSQL_BINDIR=`dirname ${OCF_RESKEY_binary}`

: ${OCF_RESKEY_client_binary=${OCF_RESKEY_client_binary_default}}

: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_datadir=${OCF_RESKEY_datadir_default}}

: ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
: ${OCF_RESKEY_group=${OCF_RESKEY_group_default}}

: ${OCF_RESKEY_log=${OCF_RESKEY_log_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_socket=${OCF_RESKEY_socket_default}}

: ${OCF_RESKEY_test_user=${OCF_RESKEY_test_user_default}}
: ${OCF_RESKEY_test_passwd=${OCF_RESKEY_test_passwd_default}}

: ${OCF_RESKEY_additional_parameters=${OCF_RESKEY_additional_parameters_default}}

#######################################################################
# Convenience variables
MYSQL=$OCF_RESKEY_client_binary
HOSTNAME=`uname -n`
MYSQL_OPTIONS_LOCAL="-S $OCF_RESKEY_socket --connect_timeout=10"
MYSQL_OPTIONS_TEST="$MYSQL_OPTIONS_LOCAL --user=$OCF_RESKEY_test_user --password=$OCF_RESKEY_test_passwd"
#######################################################################
usage() {
  cat <<UEND
usage: $0 (start|stop|meta-data|validate-all|monitor)

$0 manages a MySQL Database as an HA resource.

The 'start' operation starts the database.
The 'stop' operation stops the database.
The 'monitor' operation reports whether the database seems to be working
The 'validate-all' operation reports whether the parameters are valid

UEND
}
meta_data() {
   cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="mysql" version="0.1">
  <version>0.1</version>
  <longdesc lang="en">
This is a fictitious example resource agent written for the
OCF Resource Agent Developers Guide.
  </longdesc>
  <shortdesc lang="en">Example resource agent
  for budding OCF RA developers</shortdesc>
  <parameters>
    <parameter name="datadir" unique="0" required="0">
      <longdesc lang="en">
      Data directory, an example string parameter
      </longdesc>
      <shortdesc lang="en">Data directory</shortdesc>
      <content type="string"/>
    </parameter>
    <parameter name="test_user" unique="0" required="0">
      <longdesc lang="en">
      Test user
      </longdesc>
      <shortdesc lang="en">Test user</shortdesc>
      <content type="string"/>
    </parameter>
    <parameter name="test_passwd" unique="0" required="0">
      <longdesc lang="en">
      Test password
      </longdesc>
      <shortdesc lang="en">Test password</shortdesc>
      <content type="string"/>
    </parameter>
  </parameters>
  <actions>
    <action name="start"        timeout="20" />
    <action name="stop"         timeout="20" />
    <action name="monitor"      timeout="20"
                                interval="10" depth="0" />
    <action name="meta-data"    timeout="5" />
    <action name="validate-all"   timeout="20" />
  </actions>
</resource-agent>
END
}
# Convenience functions
#######################################################################
nodes_in_cluster() {
    local NODES

    NODES=$(crm_node --list | awk '/^\w/ {print $2}')
    if [ ! -z "$NODES" ]; then
      echo $NODES
    else
      echo
    fi
}

#Validate if GTID have correct format (return 0), else return 1
#valid values are:
#XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX:123 - standard cluster-id:commit-id
#XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX:-1 - standard non initialized cluster, 00000000-0000-0000-0000-000000000000:-1
#XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX:INF - commit-id manually set to INF, force RA to create new cluster, with master on given node
validate_gtid() {
    local rc
    local status_loglevel="err"

    if [ -z $1 ]; then
        ocf_log $status_loglevel "No GTID provided"
        return 1
    fi
    
    echo $1 | grep -q -E '^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}:([[:digit:]]|INF|-1)'
    rc=$?

    if [ $rc -ne 0 ]; then 
      ocf_log $status_loglevel "GTID have wrong format: $1"
      return 1
    else
      ocf_log info "GTID OK: $1"
      return 0
    fi
}

#Get galera GTID from local mysql instance
get_galera_gtid() {
    local rc
    local status_loglevel="err"

    # Set loglevel to info during probe
    if ocf_is_probe; then
        status_loglevel="info"
    fi

    mysql_status $status_loglevel 1

    rc=$?

    if [ $rc -ne $OCF_SUCCESS ]; then
      GTID=$(${OCF_RESKEY_binary} --wsrep-recover --log-error=/dev/stdout 2>&1 | grep 'Recovered position' | awk '{print $NF}')
    else
      CLUSTER_ID=$($MYSQL $MYSQL_OPTIONS_TEST -s -N \
          -e "SHOW STATUS LIKE 'wsrep_local_state_uuid'" | awk '{print $NF}')
      COMMIT_ID=$($MYSQL $MYSQL_OPTIONS_TEST -s -N \
          -e "SHOW STATUS LIKE 'wsrep_last_committed'" | awk '{print $NF}')
      GTID=$CLUSTER_ID:$COMMIT_ID
    fi
    
    validate_gtid $GTID

    rc=$?
    if [ $rc -eq 0 ]; then
      echo $GTID
    else
      echo 0
    fi
}

#Update gtid attribute for $HOSTNAME
update_node_gtid() {
    local GTID

    GTID=$(get_galera_gtid)

    if [ "$GTID" != 0 ]; then
      crm_attribute --node $HOSTNAME --lifetime forever --name gtid --update $GTID
    else
      ocf_log err "Wrong GTID, not updating gtid attribute"
    fi
}

#Get gtid attribute for $1 node, "0" means no GTID set or wrong format for GTID 
get_node_gtid() {
    local rc
    local GTID

    GTID=$(crm_attribute --quiet --node $1 --lifetime forever --query --name gtid 2> /dev/null)
    rc=$?

    if [ $rc -ne 0 -o -z "$GTID" ]; then
      ocf_log info "No GTID for $1"
      echo 0
    else
      validate_gtid $GTID

      rc=$?
      if [ $rc -eq 0 ]; then
        echo $GTID
      else 
        ocf_log info "No GTID for $1"
        echo 0
      fi
    fi
}

check_if_reelection_needed() {
    local PARTITION_WITH_QUORUM=$(crm_node -q)
    local RESOURCE_NAME=$(echo $OCF_RESOURCE_INSTANCE | cut -f1 -d":")
    local NODE_COUNT=$(nodes_in_cluster | wc -w)
    local RUNNING_INSTANCES
    local MY_GTID
    local MY_COMMIT_ID
    local rc

    MY_GTID=$(get_node_gtid $HOSTNAME)
    MY_COMMIT_ID=$(echo $MY_GTID | cut -f2 -d":")

    if [ "$MY_COMMIT_ID" == "INF" ]; then
      ocf_log info "Commit id set to infinity, force reelection"
      return 1
    fi
    
    if [ "$PARTITION_WITH_QUORUM" -eq 1 -o "$NODE_COUNT" -eq 1 ]; then
        RUNNING_INSTANCES=$(crm_resource --quiet --locate --resource $RESOURCE_NAME | wc -l 2> /dev/null)
        rc=$?
        if [ $rc -eq 0 -a "$RUNNING_INSTANCES" -lt 1 ]; then
          return 1
        fi
    fi
    
    return 0
}

choose_master() {
    local NODES=$1
    local -A TMP
    
    for NODE in $NODES
    do
      NODE_ID=$(echo $NODE | cksum | awk '{print $1}')
      TMP[$NODE_ID]=$NODE
    done

    MASTER=$(printf -- '%s\n' "${!TMP[@]}" | sort | head -1)
    echo ${TMP[$MASTER]}
}

check_if_galera_pc() {
    local NODES=$1
    local NODE
    local NODE_COUNT=$(echo $NODES | wc -w)
    local POSSIBLE_MASTERS
    local GTID
    local MY_GTID
    local MY_COMMIT_ID
    local TMP=0
    local rc

    ocf_log info "Checking if galera primary controller"
 
    MY_GTID=$(get_node_gtid $HOSTNAME)
    MY_COMMIT_ID=$(echo $MY_GTID | cut -f2 -d":")

    if [ "$MY_COMMIT_ID" == "INF" ]; then
      ocf_log info "Commit id set to infinity"
      return 1
    fi

    #check how many nodes have gtid smaller than me
    # gtid = 0, means not gtid set, or wrong gtid
    for NODE in $NODES
    do
      if [ "$NODE" != "$HOSTNAME" ]; then
        GTID=$(get_node_gtid $NODE)
        #gtid have defined and proper value
        if [ "$GTID" != 0 ]; then
          COMMIT_ID=$(echo $GTID | cut -f2 -d":")
          #if we found INF in any COMMIT_ID administrator manually set master in cluster
          if [ $COMMIT_ID == "INF" ]; then
            return 0
          fi
          #nodes with smaller gtid than me
          if [ "$MY_COMMIT_ID" -gt "$COMMIT_ID" ]; then
            TMP=$(($TMP+1))
          #nodes with the same gtid as me, possible masters
          elif [ "$MY_COMMIT_ID" -eq "$COMMIT_ID" ]; then
            TMP=$(($TMP+1))
            POSSIBLE_MASTERS="$POSSIBLE_MASTERS $NODE"
          fi
        else
          TMP=$(($TMP+1))
        fi
      fi
    done
   
    if [ $TMP -eq $(($NODE_COUNT-1)) ]; then
      #We have more nodes with higest gtid
      if [ ! -z "$POSSIBLE_MASTERS" ]; then
        POSSIBLE_MASTERS="$POSSIBLE_MASTERS $HOSTNAME"
        ocf_log info "We have more candidates for master: $POSSIBLE_MASTERS"
        MASTER=$(choose_master "$POSSIBLE_MASTERS")
        if [ "$MASTER" == "$HOSTNAME" ]; then
          return 1
        fi
      #I have higest gtid
      else
        return 1
      fi
    fi

    return 0
}
# Functions invoked by resource manager actions

mysql_validate() {
    check_binary $OCF_RESKEY_binary
    check_binary $OCF_RESKEY_client_binary

    if [ ! -f $OCF_RESKEY_config ]; then
        ocf_log err "Config $OCF_RESKEY_config doesn't exist";
        return $OCF_ERR_INSTALLED;
    fi

    if [ ! -d $OCF_RESKEY_datadir ]; then
        ocf_log err "Datadir $OCF_RESKEY_datadir doesn't exist";
        return $OCF_ERR_INSTALLED;
    fi

    getent passwd $OCF_RESKEY_user >/dev/null 2>&1
    if [ ! $? -eq 0 ]; then
        ocf_log err "User $OCF_RESKEY_user doesn't exit";
        return $OCF_ERR_INSTALLED;
    fi

    getent group $OCF_RESKEY_group >/dev/null 2>&1
    if [ ! $? -eq 0 ]; then
        ocf_log err "Group $OCF_RESKEY_group doesn't exist";
        return $OCF_ERR_INSTALLED;
    fi

    true
}

mysql_status() {
    i=${2:-3}
    sleeptime=${3:-5}
    while [ $i -gt 0 ]
    do
      if [ ! -e $OCF_RESKEY_pid ]; then
        ocf_log info "PIDFile ${OCF_RESKEY_pid} of MySQL server not found. Sleeping for $sleeptime seconds. $(( i-1 )) retries left"
        sleep $sleeptime
      else
        break
      fi
      let i=$i-1
    done

    if [ $i -eq 0 ]
    then
      ocf_log $1 "MySQL is not running"
      return $OCF_NOT_RUNNING;
    fi

    pid=`cat $OCF_RESKEY_pid`;
    if [ -d /proc -a -d /proc/1 ]; then
        [ "u$pid" != "u" -a -d /proc/$pid ]
    else
        kill -s 0 $pid >/dev/null 2>&1
    fi

    if [ $? -eq 0 ]; then
        return $OCF_SUCCESS;
    else
        ocf_log $1 "MySQL not running: removing old PID file"
        rm -f $OCF_RESKEY_pid
        return $OCF_NOT_RUNNING;
    fi
}

mysql_monitor() {
    local rc
    local status_loglevel="err"
    local WSREP_CONNECTED
    local WSREP_LOCAL_STATE
    local WSREP_READY

    # Set loglevel to info during probe
    if ocf_is_probe; then
        status_loglevel="info"
    fi

    update_node_gtid

    mysql_status $status_loglevel

    rc=$?

    if [ $rc -ne $OCF_SUCCESS ]; then
        return $rc
    fi

    WSREP_CONNECTED=$($MYSQL $MYSQL_OPTIONS_TEST -s -N \
      -e "SHOW STATUS LIKE 'wsrep_connected'" | awk '{print $NF}')
    rc=$?

    if [ $rc -ne 0 -o "$WSREP_CONNECTED" != "ON" ]; then
      return $OCF_ERR_GENERIC
    fi

    WSREP_LOCAL_STATE=$($MYSQL $MYSQL_OPTIONS_TEST -s -N \
      -e "SHOW STATUS LIKE 'wsrep_local_state'" | awk '{print $NF}')
    rc=$?
 
    #Synced
    if [ $rc -eq 0 -a "$WSREP_LOCAL_STATE" == 4 ]; then
      WSREP_READY=$($MYSQL $MYSQL_OPTIONS_TEST -s -N \
        -e "SHOW STATUS LIKE 'wsrep_ready'" | awk '{print $NF}')
      rc=$?
     
      #Synced but wsrep not ready 
      if [ $rc -ne 0 -o "$WSREP_READY" != "ON" ]; then
        return $OCF_ERR_GENERIC
      fi
    fi

    ocf_log debug "MySQL monitor succeeded";
    return $OCF_SUCCESS
}

mysql_start() {
    local NODES

    mysql_status info 1
    if [ $? = $OCF_SUCCESS ]; then
        ocf_log info "MySQL already running"
        return $OCF_SUCCESS
    fi

    pid_dir=`dirname $OCF_RESKEY_pid`
    if [ ! -d $pid_dir ] ; then
        ocf_log info "Creating PID dir: $pid_dir"
        mkdir -p $pid_dir
        chown $OCF_RESKEY_user:$OCF_RESKEY_group $pid_dir
    fi

    socket_dir=`dirname $OCF_RESKEY_socket`
    if [ ! -d $socket_dir ] ; then
        ocf_log info "Creating socket dir: $socket_dir"
        mkdir -p $socket_dir
        chown $OCF_RESKEY_user:$OCF_RESKEY_group $socket_dir
    fi

    # Regardless of whether we just created the directory or it
    # already existed, check whether it is writable by the configured
    # user
    for dir in $pid_dir $socket_dir; do
        if ! su -s /bin/sh - $OCF_RESKEY_user -c "test -w $dir"; then
            ocf_log err "Directory $dir is not writable by $OCF_RESKEY_user"
            exit $OCF_ERR_PERM;
        fi
    done

    if [ -f /tmp/wsrep-init-file ]; then
      mysql_extra_params="--init-file=/tmp/wsrep-init-file"
    else
      mysql_extra_params=""
    fi
    NODES=$(nodes_in_cluster)


    check_if_reelection_needed
    rc=$?

    if [ $rc -eq 1 ]; then
      check_if_galera_pc "$NODES"
      rc=$?
   
      if [ $rc -eq 1 ]; then
        ocf_log info "Im galera primary controller, join me!"
        mysql_extra_params="$mysql_extra_params --wsrep-cluster-address=gcomm://"
      fi
    fi

    #ensure mysql is down
    killall mysqld mysqld_safe && sleep 15
    killall -s KILL mysqld mysqld_safe && sleep 2

    ${OCF_RESKEY_binary} \
    --pid-file=$OCF_RESKEY_pid \
    --datadir=$OCF_RESKEY_datadir \
    --user=$OCF_RESKEY_user $OCF_RESKEY_additional_parameters \
    $mysql_extra_params >/dev/null 2>&1 &
    rc=$?

    if [ $rc != 0 ]; then
        ocf_log err "MySQL start command failed: $rc"
        return $rc
    fi

    # Spin waiting for the server to come up.
    # Let the CRM/LRM time us out if required.
    start_wait=1
    while [ $start_wait = 1 ]; do
        mysql_status info
        rc=$?
        if [ $rc = $OCF_SUCCESS ]; then
            start_wait=0

            elif [ $rc != $OCF_NOT_RUNNING ]; then
            ocf_log info "MySQL start failed: $rc"
            return $rc
        fi
        sleep 2
    done

    ocf_log info "MySQL started"
    return $OCF_SUCCESS
}

mysql_stop() {
    if [ ! -f $OCF_RESKEY_pid ]; then
        ocf_log info "MySQL is not running"
        return $OCF_SUCCESS
    fi
    pid=`cat $OCF_RESKEY_pid 2> /dev/null `
    /bin/kill $pid > /dev/null
    rc=$?
    if [ $rc != 0 ]; then
        ocf_log err "MySQL couldn't be stopped"
        return $OCF_ERR_GENERIC
    fi
    # stop waiting
    shutdown_timeout=15
    count=0
    while [ $count -lt $shutdown_timeout ]
    do
        mysql_status info 1
        rc=$?
        if [ $rc = $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        ocf_log debug "MySQL still hasn't stopped yet. Waiting..."
    done

    mysql_status info 1
    if [ $? != $OCF_NOT_RUNNING ]; then
        ocf_log info "MySQL failed to stop after ${shutdown_timeout}s using SIGTERM. Trying SIGKILL..."
        /bin/kill -KILL $pid > /dev/null
    fi

    ocf_log info "MySQL stopped";
    rm -f /var/lock/subsys/mysqld
    rm -f $OCF_RESKEY_socket

    update_node_gtid

    return $OCF_SUCCESS
}

##########################################################################
# If DEBUG_LOG is set, make this resource agent easy to debug: set up the
# debug log and direct all output to it.  Otherwise, redirect to /dev/null.
# The log directory must be a directory owned by root, with permissions 0700,
# and the log must be writable and not a symlink.
##########################################################################
DEBUG_LOG="/tmp/mysql.ocf.ra.debug/log"
if [ "${DEBUG_LOG}" -a -w "${DEBUG_LOG}" -a ! -L "${DEBUG_LOG}" ]; then
    DEBUG_LOG_DIR="${DEBUG_LOG%/*}"
    if [ -d "${DEBUG_LOG_DIR}" ]; then
        exec 9>>"$DEBUG_LOG"
        exec 2>&9
        date >&9
        echo "$*" >&9
        env | grep OCF_ | sort >&9
        set -x
    else
        exec 9>/dev/null
    fi
fi

case "$1" in
  meta-data)    meta_data
        exit $OCF_SUCCESS;;
  usage|help)   usage
        exit $OCF_SUCCESS;;
esac

mysql_validate
rc=$?
LSB_STATUS_STOPPED=3
if [ $rc -ne 0 ]; then
    case "$1" in
        stop) exit $OCF_SUCCESS;;
        monitor) exit $OCF_NOT_RUNNING;;
        *) exit $rc;;
    esac
fi

# What kind of method was invoked?
case "$1" in
  start)    mysql_start;;
  stop)     mysql_stop;;
  monitor)  mysql_monitor;;
  validate-all) exit $OCF_SUCCESS;;

 *)     usage
        exit $OCF_ERR_UNIMPLEMENTED;;
esac
