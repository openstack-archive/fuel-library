# == Class: openstack:rabbitmq_fence
#
# Configures a daemon for dead rabbitmq
# nodes fencing. The daemon uses dbus
# system events generated by the Corosync
#
class openstack::rabbitmq_fence(
  $enabled = false,
) {
  case $::osfamily {
    'RedHat': {
      $packages = ['dbus', 'dbus-python', 'pygobject2']
      $dbus_service_name = 'messagebus'
    }
    'Debian': {
      $packages = [ 'python-gobject', 'python-gobject-2',
        'python-dbus', 'python-daemon' ]
      $dbus_service_name = 'dbus'
    }
    default: {
      fail("Unsupported osfamily: ${::osfamily} operatingsystem:\
 ${::operatingsystem}, module ${module_name} only support osfamily\
 RedHat and Debian")
    }
  }

  #FIXME(bogdando) provide the package or add the init script for
  #the rabbit-fence daemon and ensure it is $enabled
  # service { 'rabbit-fence':
  #  enable => $enabled,
  #  ensure => $enabled ? { true => running, false => stopped }
  # }
  file { '/usr/bin/rabbit-fence.py':
    source  => 'puppet:///modules/openstack/rabbit-fence.py',
    owner   => 'root',
    group   => 'root',
    mode    => '0755',
  }

  file { '/usr/bin/rabbitmq-kick.sh':
    source  => 'puppet:///modules/openstack/rabbitmq-kick.sh',
    owner   => 'root',
    group   => 'root',
    mode    => '0755',
  }

  package { $packages: } ~>
  service { $dbus_service_name:
    ensure     => running,
    enable     => true,
    hasstatus  => true,
    hasrestart => true,
  }
}
