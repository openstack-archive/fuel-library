# File is managed by puppet
# Note: use http://grokdebug.herokuapp.com/ to validate grok patterns
# against real messages examples
#
input {
tcp {
port => <%= @logstash_port %>
type => "custom"
charset => "UTF-8"
}
udp {
port => <%= @logstash_port %>
type => "custom"
charset => "UTF-8"
}
}

  filter {
  # Mark & extract PRI and send it to syslog_pri plugin
  grep {
    type => "custom"
    drop => false
  }
  grok {
    type => "custom"
    pattern => "<%%{POSINT:syslog_pri}>?%{SPACE}%{DATA:message_remainder}$"
    add_tag => "has_pri"
  }
  # Remove PRI from the message
  mutate {
    type => "custom"
    tags => "has_pri"
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # XXX must not be combined with replacement which uses same field
    type => "custom"
    tags => "has_pri"
    remove => "message_remainder"
  }
  # Parse message
  # Detect Openstack logs
  grok {
      type => "custom"
      exclude_tags => [ "imfile", "rabbitmq" ]
      pattern => "^(?<generated_at>\d{4}-\d{2}-\d{2}\ \d{2}:\d{2}:\d{2})(\.\d{1,})?%{SPACE}(?<syslog_pid>\d{1,}\ )?%{WORD:syslog_severity}%{SPACE}(?<syslog_program>[A-Za-z0-9_\(\)\./\-]*)%{SPACE}%{GREEDYDATA:syslog_message}$"
      add_tag => "openstack"
  }
  # Detect messages generated by rabbitmq (via imfile)
  grok {
      type => "custom"
      exclude_tags => [ "has_pri", "openstack" ]
      pattern => "^=%{WORD:syslog_severity}.*=%{GREEDYDATA:syslog_message}$"
      add_tag => [ "rabbitmq", "imfile" ]
      add_field => [ "syslog_message", "%{@message}" ]
      add_field => [ "syslog_program", "rabbitmq" ]
  }
  # Detect rfc5424 formatted messages (bootstrap and anaconda logs from send2syslog.py)
  grok {
      type => "custom"
      tags => "has_pri"
      exclude_tags => [ "imfile", "rabbitmq", "openstack" ]
      pattern => "^1%{SPACE}(?<generated_at>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(\.\d{1,})?(Z|[+-]\d{2}:\d{2})?%{SPACE}[A-Z0-9a-z\-\.]*%{SPACE}(?<syslog_program>[A-Za-z0-9_\(\)\./\-]*)(?:\[%{POSINT:syslog_pid}\])?:?%{SPACE}%{GREEDYDATA:syslog_message}$"
      add_tag => "rfc5424"
  }
  # Detect rfc3164 formatted messages
  grok {
      type => "custom"
      tags => "has_pri"
      exclude_tags => [ "rfc5424", "rabbitmq", "imfile", "openstack" ]
      pattern => "^%{SYSLOGTIMESTAMP}%{SPACE}%{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:%{SPACE}%{GREEDYDATA:syslog_message}$"
      add_tag => "rfc3164"
  }
  # Detect messages with slashes/round brackets etc in the program name
  grok {
      type => "custom"
      tags => "has_pri"
      exclude_tags => [ "rfc3164", "rfc5424", "rabbitmq", "imfile", "openstack" ]
      pattern => "^%{SYSLOGTIMESTAMP}%{SPACE}(?<syslog_program>[A-Za-z0-9_\(\)\./\-]*)(?:\[%{POSINT:syslog_pid}\])?:?%{SPACE}%{GREEDYDATA:syslog_message}$"
      add_tag => "nonalphanum"
  }
  # Detect custom formatted messages
  # netcatted
  grok {
      type => "custom"
      tags => "has_pri"
      exclude_tags => [ "nonalphanum", "rfc3164", "rfc5424", "rabbitmq", "imfile", "openstack" ]
      pattern => "^(?<generated_at>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}\+\d{2}:\d{2})%{SPACE}(?<source_host>\w+\-\d+)%{SPACE}(?<syslog_program>[A-Za-z0-9_\(\)\./\-]*).log%{SPACE}%{WORD:syslog_severity}:%{SPACE}%{GREEDYDATA:syslog_message}$"
      add_tag => "netcat"
  }
  # other cases, includes unrecognized imfile messages for multilined log entries
  grok {
      type => "custom"
      tags => "has_pri"
      exclude_tags => [ "netcat", "nonalphanum", "rfc3164", "rfc5424", "rabbitmq", "imfile", "openstack" ]
      pattern => "^%{PROG:syslog_program}%{SPACE}%{GREEDYDATA:syslog_message}$"
      add_tag => "nonrfc"
  }

  mutate {
    type => "custom"
    tags => "_grokparsefailure"
    remove_tag => "_grokparsefailure"
  }

  ## Any extra processing you wish to do should be done here before
  ## closing filter stanza and proceeding to output stanzas.
  ## See logstash-indexer-NAT.conf example.

}

output {
elasticsearch {
  cluster => <%= @cluster_name %>
  host => "<%= @elasticsearch_node %>"
  type => "custom"
  embedded => false
  max_inflight_requests => 500
}
#stdout {
#  debug => true
#  type => "custom"
#}
}
