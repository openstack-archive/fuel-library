#!/bin/bash
#
#
# OpenStack Neutron Metadata Agent service
#
# Description:  Manages an OpenStack Neutron Metadata Agent process as an HA resource
#
# Authors: Emilien Macchi
# Mainly inspired by the Nova Network resource agent written by Emilien Macchi & Sebastien Han
#
# Support:      openstack@lists.launchpad.net
# License:      Apache Software License (ASL) 2.0
#
#
# See usage() function below for more details ...
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified

PATH=/sbin:/usr/sbin:/bin:/usr/bin

OCF_RESKEY_binary_default="neutron-metadata-agent"
OCF_RESKEY_config_default="/etc/neutron/neutron.conf"
OCF_RESKEY_agent_config_default="/etc/neutron/metadata_agent.ini"
OCF_RESKEY_log_file_default="/var/log/neutron/metadata-agent.log"
OCF_RESKEY_user_default="neutron"
OCF_RESKEY_pid_default="$HA_RSCTMP/$OCF_RESOURCE_INSTANCE.pid"
OCF_RESKEY_debug_default="false"

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_agent_config=${OCF_RESKEY_agent_config_default}}
: ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_log_file=${OCF_RESKEY_log_file_default}}
: ${OCF_RESKEY_debug=${OCF_RESKEY_debug_default}}

#######################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages an OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) process as an HA resource

        The 'start' operation starts the networking service.
        The 'stop' operation stops the networking service.
        The 'validate-all' operation reports whether the parameters are valid
        The 'meta-data' operation reports this RA's meta-data information
        The 'status' operation reports whether the networking service is running
        The 'monitor' operation reports whether the networking service seems to be working

UEND
}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="neutron-metadata-agent">
<version>1.0</version>

<longdesc lang="en">
Resource agent for the OpenStack Neutron Metadata Agent
May manage a neutron-metadata-agent instance or a clone set that
creates a distributed neutron-metadata-agent cluster.
</longdesc>
<shortdesc lang="en">Manages the OpenStack OVS Service (${OCF_RESKEY_binary})</shortdesc>
<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the Neutron Metadata Agent binary
</longdesc>
<shortdesc lang="en">Neutron Metadata Agent binary</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron Service (neutron-server) configuration file
</longdesc>
<shortdesc lang="en">OpenStack OVS Server (neutron-server) config file</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="agent_config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron Metadata Agent configuration file
</longdesc>
<shortdesc lang="en">OpenStack Neutron Metadata Agent config file</shortdesc>
<content type="string" default="${OCF_RESKEY_agent_config_default}" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
User running Neutron Metadata Agent service (${OCF_RESKEY_binary})
</longdesc>
<shortdesc lang="en">OpenStack Neutron Metadata Agent service (${OCF_RESKEY_binary}) user</shortdesc>
<content type="string" default="${OCF_RESKEY_user_default}" />
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pid file to use for this Neutron Metadata Agent service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Neutron Metadata Agent service (${OCF_RESKEY_binary}) pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}" />
</parameter>

<parameter name="log_file" unique="0" required="0">
<longdesc lang="en">
The log file to use for this OpenStack Metadata Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Metadata Service (${OCF_RESKEY_binary}) log file</shortdesc>
<content type="string" default="${OCF_RESKEY_log_file_default}" />
</parameter>

<parameter name="debug" unique="0" required="0">
<longdesc lang="en">
The debug flag for  OpenStack Metadata Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Metadata Service (${OCF_RESKEY_binary}) debug flag</shortdesc>
<content type="boolean" default="${OCF_RESKEY_debug_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20" />
<action name="stop" timeout="20" />
<action name="status" timeout="20" />
<action name="monitor" timeout="30" interval="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

get_worker_pid() {
    pid=`pgrep -u ${OCF_RESKEY_user} -fol ${OCF_RESKEY_binary} | grep -E  "python\s+\/usr\/bin" | awk '{print $1}'`
    echo $pid
}

#######################################################################
# Functions invoked by resource manager actions

neutron_metadata_agent_validate() {
    local rc

    check_binary $OCF_RESKEY_binary
    check_binary netstat

    # A config file on shared storage that is not available
    # during probes is OK.
    if [ ! -f $OCF_RESKEY_config ]; then
        if ! ocf_is_probe; then
            ocf_log err "Config $OCF_RESKEY_config doesn't exist"
            return $OCF_ERR_INSTALLED
        fi
        ocf_log_warn "Config $OCF_RESKEY_config not available during a probe"
    fi

    getent passwd $OCF_RESKEY_user >/dev/null 2>&1
    rc=$?
    if [ $rc -ne 0 ]; then
        ocf_log err "User $OCF_RESKEY_user doesn't exist"
        return $OCF_ERR_INSTALLED
    fi

    true
}


neutron_metadata_agent_status() {
    local pid
    local f_pid
    local rc

    pid=`get_worker_pid`
    if [ "xxx$pid" == "xxx" ] ; then
        ocf_log warn "OpenStack Neutron agent '$OCF_RESKEY_binary' not running."
        return $OCF_NOT_RUNNING
    fi

    # Check PID file and create if need
    if [ ! -f $OCF_RESKEY_pid ] ; then
        ocf_log warn "OpenStack Neutron agent (${OCF_RESKEY_binary}) was run, but no PID file found."
        ocf_log warn "Writing PID='$pid' to '$OCF_RESKEY_pid' for '${OCF_RESKEY_binary}' worker..."
        echo $pid > $OCF_RESKEY_pid
        return $OCF_SUCCESS
    fi

    # compare PID from file with PID from `pgrep...`
    f_pid=`cat $OCF_RESKEY_pid | tr '\n' ' ' | awk '{print $1}'`
    if [ "xxx$pid" == "xxx$f_pid" ]; then
        return $OCF_SUCCESS
    fi

    # at this point we have PID file and PID from it
    # defferents with PID from `pgrep...`
    if [ ! -d "/proc/$f_pid" ] || [ "xxx$f_pid" == "xxx" ] ; then
        # process with PID from PID-file not found
        ocf_log warn "Old PID file $OCF_RESKEY_pid found, but no running processes with PID=$f_pid found."
        ocf_log warn "PID-file will be re-created (with PID=$pid)."
        echo $pid > $OCF_RESKEY_pid
        return $OCF_SUCCESS
    fi

    # at this point we have alien PID-file and running prosess with this PID.
    ocf_log warn "Another daemon (with PID=$f_pid) running with PID file '$OCF_RESKEY_pid'. My PID=$pid"
    return $OCF_ERR_GENERIC
}


neutron_metadata_agent_monitor() {
    neutron_metadata_agent_status
    rc=$?
    return $rc
}


neutron_metadata_agent_start() {
    local rc
    neutron_metadata_agent_status
    rc=$?
    if [ $rc -eq $OCF_SUCCESS ]; then
        ocf_log info "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) already running"
        return $OCF_SUCCESS
    fi

    # run and detach to background Neutron-metadata-agent as daemon.
    # Don't use ocf_run as we're sending the tool's output
    su ${OCF_RESKEY_user} -s /bin/sh -c "${OCF_RESKEY_binary} --config-file=$OCF_RESKEY_config \
        --config-file=$OCF_RESKEY_agent_config $OCF_RESKEY_additional_parameters \
        >> ${OCF_RESKEY_log_file}"' 2>&1 &'

    # Spin waiting for the server to come up.
    # Let the CRM/LRM time us out if required
    while true; do
        neutron_metadata_agent_monitor
        rc=$?
        [ $rc -eq $OCF_SUCCESS ] && break
        if [ $rc -ne $OCF_NOT_RUNNING ] ; then
            ocf_log err "OpenStack (${OCF_RESKEY_binary}) start failed"
            exit $OCF_ERR_GENERIC
        fi
        sleep 3
    done

    ocf_log info "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) started"
    return $OCF_SUCCESS
}


neutron_metadata_agent_stop() {
    local rc
    local pid

    neutron_metadata_agent_status
    rc=$?
    if [ $rc -eq $OCF_NOT_RUNNING ]; then
        ocf_log info "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) already stopped"
        return $OCF_SUCCESS
    fi

    # Try SIGTERM
    pid=`get_worker_pid`
    if [ "xxx$pid" == "xxx" ] ; then
        ocf_log warn "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) not running."
        #return $OCF_NOT_RUNNING
        return $OCF_SUCCESS
    fi
    ocf_run kill -s TERM $pid
    rc=$?
    if [ $rc -ne 0 ]; then
        ocf_log err "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) couldn't be stopped"
        exit $OCF_ERR_GENERIC
    fi

    # stop waiting
    shutdown_timeout=15
    if [ -n "$OCF_RESKEY_CRM_meta_timeout" ]; then
        shutdown_timeout=$((($OCF_RESKEY_CRM_meta_timeout/1000)-5))
    fi
    count=0
    while [ $count -lt $shutdown_timeout ]; do
        neutron_metadata_agent_status
        rc=$?
        if [ $rc -eq $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        ocf_log debug "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) still hasn't stopped yet. Waiting ..."
    done

    neutron_metadata_agent_status
    rc=$?
    if [ $rc -ne $OCF_NOT_RUNNING ]; then
        # SIGTERM didn't help either, try SIGKILL
        ocf_log info "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) failed to stop after ${shutdown_timeout}s \
          using SIGTERM. Trying SIGKILL ..."
        ocf_run kill -s KILL $pid
    fi

    ocf_log info "OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) stopped"

    rm -f $OCF_RESKEY_pid

    return $OCF_SUCCESS
}

#######################################################################

case "$1" in
  meta-data)    meta_data
                exit $OCF_SUCCESS;;
  usage|help)   usage
                exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
neutron_metadata_agent_validate || exit $?

# What kind of method was invoked?
case "$1" in
  start)        neutron_metadata_agent_start;;
  stop)         neutron_metadata_agent_stop;;
  status)       neutron_metadata_agent_status;;
  monitor)      neutron_metadata_agent_monitor;;
  validate)     neutron_metadata_agent_validate;;
  validate-all) neutron_metadata_agent_validate;;
  *)            usage
                exit $OCF_ERR_UNIMPLEMENTED;;
esac
