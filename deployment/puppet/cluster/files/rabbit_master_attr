#!/bin/sh
#
#
#	rabbit_master_attr OCF RA that utilizes the system rabbit_master_attr 
#
# Copyright (c) 2009 Andrew Beekhof
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

. ${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="rabbit_master_attr">
<version>1.0</version>

<longdesc lang="en">
Every time the monitor action is run, this resource agent records (in the CIB) the current number of rabbit_master_attr nodes the host can connect to.
It is essentially the same as rabbit_master_attrd except that it uses the system rabbit_master_attr tool to obtain the results.
</longdesc>
<shortdesc lang="en">node connectivity</shortdesc>

<parameters>

<parameter name="pidfile" unique="0">
<longdesc lang="en">PID file</longdesc>
<shortdesc lang="en">PID file</shortdesc>
<content type="string" default="$HA_VARRUN/rabbit_master_attr-${OCF_RESOURCE_INSTANCE}" />
</parameter>

<parameter name="name" unique="0">
<longdesc lang="en">
The name of the attributes to set.  This is the name to be used in the constraints.
</longdesc>
<shortdesc lang="en">Attribute name</shortdesc>
<content type="string" default="rabbit_master_attrd"/>
</parameter>

<parameter name="debug" unique="0">
<longdesc lang="en">
Enables to use default attrd_updater verbose logging on every call.
</longdesc>
<shortdesc lang="en">Verbose logging</shortdesc>
<content type="string" default="false"/>
</parameter>

</parameters>

<actions>
<action name="start"   timeout="60" />
<action name="stop"    timeout="20" />
<action name="reload"  timeout="100" />
<action name="monitor" depth="0"  timeout="60" interval="10"/>
<action name="meta-data"  timeout="5" />
<action name="validate-all"  timeout="30" />
</actions>
</resource-agent>
END
}

#######################################################################

rabbit_master_attr_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

rabbit_master_attr_start() {
    rabbit_master_attr_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi
    touch ${OCF_RESKEY_pidfile}
    rabbit_master_attr_update
}

rabbit_master_attr_stop() {
    
    rm -f ${OCF_RESKEY_pidfile}
    
    attrd_updater -D -n $OCF_RESKEY_name
    
    return $OCF_SUCCESS
}

rabbit_master_attr_monitor() {
    if [ -f ${OCF_RESKEY_pidfile} ]; then
	rabbit_master_attr_update
	return $OCF_SUCCESS
    fi
    return $OCF_NOT_RUNNING
}

rabbit_master_attr_validate() {
    # Is the state directory writable? 
    state_dir=`dirname "$OCF_RESKEY_pidfile"`
    touch "$state_dir/$$"
    if [ $? != 0 ]; then
	ocf_log err "Invalid location for 'state': $state_dir is not writable"
	return $OCF_ERR_ARGS
    fi
    rm "$state_dir/$$"

# Pidfile better be an absolute path
    case $OCF_RESKEY_pidfile in
	/*) ;;
	*) ocf_log warn "You should use an absolute path for pidfile not: $OCF_RESKEY_pidfile" ;;
    esac
    
# Check the host list

    check_binary /usr/local/bin/check_if_rabbit_master

    return $OCF_SUCCESS
}

rabbit_master_attr_update() {
    /usr/local/bin/check_if_rabbit_master
    rc=$?
    attrd_updater -n $OCF_RESKEY_name -v $rc -d $attrd_options
}

: ${OCF_RESKEY_name:="rabbit_master_attrd"}
: ${OCF_RESKEY_debug:="false"}

: ${OCF_RESKEY_CRM_meta_timeout:="20000"}
: ${OCF_RESKEY_CRM_meta_globally_unique:="true"}

OCF_RESKEY_timeout=10

if [ ${OCF_RESKEY_CRM_meta_globally_unique} = "false" ]; then
    : ${OCF_RESKEY_pidfile:="$HA_VARRUN/rabbit_master_attr-${OCF_RESKEY_name}"}
else 
    : ${OCF_RESKEY_pidfile:="$HA_VARRUN/rabbit_master_attr-${OCF_RESOURCE_INSTANCE}"}
fi

attrd_options='-q'
if ocf_is_true ${OCF_RESKEY_debug} ; then
    attrd_options=''
fi

# Check the debug option    
    case "${OCF_RESKEY_debug}" in
	true|True|TRUE|1)    OCF_RESKEY_debug=true;;
	false|False|FALSE|0) OCF_RESKEY_debug=false;;
	*)
            ocf_log warn "Value for 'debug' is incorrect. Please specify 'true' or 'false' not: ${OCF_RESKEY_debug}"
	    OCF_RESKEY_debug=false
	    ;;
    esac

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		rabbit_master_attr_start;;
stop)		rabbit_master_attr_stop;;
monitor)	rabbit_master_attr_monitor;;
reload)		rabbit_master_attr_start;;
validate-all)	rabbit_master_attr_validate;;
usage|help)	rabbit_master_attr_usage
		exit $OCF_SUCCESS
		;;
*)		rabbit_master_attr_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
exit $?

