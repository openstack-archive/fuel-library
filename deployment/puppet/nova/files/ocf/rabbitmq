#!/bin/bash
#
# See usage() function below for more details ...
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified

PATH=/sbin:/usr/sbin:/bin:/usr/bin

OCF_RESKEY_binary_default="/bin/true"
OCF_RESKEY_service_name_default="rabbitmq-server"
OCF_RESKEY_debug_default=false
OCF_RESKEY_shutdown_timeout_default=15

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_service_name=${OCF_RESKEY_service_name_default}}
: ${OCF_RESKEY_debug=${OCF_RESKEY_debug_default}}
: ${OCF_RESKEY_shutdown_timeout=${OCF_RESKEY_shutdown_timeout_default}}

OCF_RESKEY_master_flag_file_default="/tmp/master__${OCF_RESKEY_service_name}"
: ${OCF_RESKEY_master_flag_file=${OCF_RESKEY_master_flag_file_default}}

#######################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages an AMQP Agent (${OCF_RESKEY_service_name}) process as an HA resource

        The 'start' operation starts the networking service.
        The 'stop' operation stops the networking service.
        The 'validate-all' operation reports whether the parameters are valid
        The 'meta-data' operation reports this RA's meta-data information
        The 'status' operation reports whether the networking service is running
        The 'monitor' operation reports whether the networking service seems to be working

UEND
}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="${OCF_RESKEY_service_name}">
<version>1.0</version>

<longdesc lang="en">
Resource agent for ${OCF_RESKEY_service_name}
</longdesc>
<shortdesc lang="en">Resource agent for ${OCF_RESKEY_service_name}</shortdesc>
<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Agent binary
</longdesc>
<shortdesc lang="en">Agent binary</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="service_name" unique="0" required="0">
<longdesc lang="en">
Agent system service name
</longdesc>
<shortdesc lang="en">Agent system service name</shortdesc>
<content type="string" default="${OCF_RESKEY_service_name_default}" />
</parameter>

<parameter name="master_flag_file" unique="0" required="0">
<longdesc lang="en">
Master flag file
</longdesc>
<shortdesc lang="en">Master flag file</shortdesc>
<content type="string" default="${OCF_RESKEY_master_flag_file_default}" />
</parameter>

<parameter name="shutdown_timeout" unique="0" required="0">
<longdesc lang="en">
Timeout for shutdown rabbitmq server before kill -TERM
</longdesc>
<shortdesc lang="en">Timeout for shutdown rabbitmq server</shortdesc>
<content type="string" default="${OCF_RESKEY_shutdown_timeout_default}" />
</parameter>

<parameter name="debug" unique="0" required="0">
<longdesc lang="en">
The debug flag for  AMQP Agent (${OCF_RESKEY_service_name}) instance
</longdesc>
<shortdesc lang="en">AMQP Agent (${OCF_RESKEY_service_name}) debug flag</shortdesc>
<content type="boolean" default="${OCF_RESKEY_debug_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20" />
<action name="stop" timeout="20" />
<action name="status" timeout="20" />
<action name="monitor" depth="0" timeout="30" interval="5" />
<action name="monitor" depth="0" timeout="30" interval="3" role="Master"/>
<action name="promote" timeout="30" />
<action name="demote"  timeout="30" />
<action name="notify"   timeout="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
#<action name="methods" timeout="5" />
}

# get_worker_pid() {
#     pid=`pgrep -u ${OCF_RESKEY_user} -fol ${OCF_RESKEY_service_name} | grep -E  "python\s+\/usr\/bin" | awk '{print $1}'`
#     echo $pid
# }

#######################################################################
# Functions invoked by resource manager actions

agent_validate() {
    return $OCF_SUCCESS
}

get_status() {
    local rc
    #local pid
    #pid=`get_worker_pid`

    service ${OCF_RESKEY_service_name} status 2>&1 >> /dev/null
    rc=$?

    if [ "$rc" == "0" ] ; then
        return $OCF_SUCCESS
    fi
    return $OCF_NOT_RUNNING
}
agent_status() {
    local rc
    local d

    get_status
    rc=$?
    return $rc
}


get_monitor() {
    local rc
    local sk
    local racc
    local crv

    get_status
    rc=$?

    if [ "$rc" == "$OCF_NOT_RUNNING" ] ; then
        #crm_master -l reboot -D
        crm_master -l reboot -v 0
        return $OCF_NOT_RUNNING
    elif [ "$rc" == "$OCF_SUCCESS" -a -e ${OCF_RESKEY_master_flag_file} ] ; then
        rc=$OCF_RUNNING_MASTER
    fi

    #racc=`rabbitmqctl list_queues pid  2>>/dev/null | grep -v "Listing queues" | grep -v "...done" | cut -d'@' -f2 | cut -d"'" -f1 | awk 'BEGIN {max=0} { count[$1]++; if ( count[$1] > max ) { max=count[$1];popular=$1 }} END { print popular }'`
    racc=`hostname -s`
    sk=`rabbitmqctl list_queues pid | grep -c "$racc"`

    crm_master -l reboot -v $sk

    return $rc
}
agent_monitor() {
    local rc

    get_monitor
    rc=$?
    return $rc
}


agent_notify() {
    local rc

    get_monitor
    rc=$?
    #return $rc
    return $OCF_SUCCESS
}


agent_start() {
    local rc
    local alr

    get_status
    rc=$?
    if [ "$rc" == "$OCF_SUCCESS" ] ; then
        ocf_log warn "Agent (${OCF_RESKEY_service_name}) already started."
        return $OCF_SUCCESS
    fi

    ocf_log warn "Agent (${OCF_RESKEY_service_name}) going to start."
    service ${OCF_RESKEY_service_name} start 2>&1 >> /dev/null

    get_status
    rc=$?
    return $rc
}


agent_stop() {
    local rc
    local pid
    local alr

    get_status
    rc=$?
    if [ $rc -eq $OCF_NOT_RUNNING ]; then
        ocf_log warn "Agent (${OCF_RESKEY_service_name}) not running."
        return $OCF_SUCCESS
    fi

    # remove master flag
    rm -f ${OCF_RESKEY_master_flag_file}
    # remove master score
    #crm_master -l reboot -D
    crm_master -l reboot -v 0

    ocf_log warn "Agent (${OCF_RESKEY_service_name}) going to down."
    service ${OCF_RESKEY_service_name} stop 2>&1 >> /dev/null

    # stop waiting
    count=0
    while [ $count -lt ${OCF_RESKEY_shutdown_timeout} ]; do
        get_status
        rc=$?
        if [ $rc -eq $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        ocf_log debug "Agent (${OCF_RESKEY_service_name}) still hasn't stopped yet. Waiting ..."
    done

    get_status
    rc=$?
    if [ $rc -ne $OCF_NOT_RUNNING ]; then
        ocf_log info "Agent (${OCF_RESKEY_service_name}) failed to stop after ${OCF_RESKEY_shutdown_timeout}s, using kill -TERM."
        kill -TERM $(pstree -p | awk '/beam\([0-9]+\)/ { q=gensub(/.*beam\(([0-9]+)\).*/, "\\1", 1) ; print q }')
    fi

    return $OCF_SUCCESS
}

#######################################################################
agent_promote() {
    local rc
    local pid

    get_monitor
    rc=$?

    case "$rc" in
        "$OCF_SUCCESS")
            # Running as slave. Normal, expected behavior.
            ocf_log debug "Resource is currently running as Slave"
            ;;
        "$OCF_RUNNING_MASTER")
            # Already a master. Unexpected, but not a problem.
            ocf_log info "Resource is already running as Master"
            #echo "$d  [promote]  rc=$rc  Already_master" >> /tmp/${OCF_RESKEY_app_prefix}.log
            return $OCF_SUCCESS
            ;;
        "$OCF_NOT_RUNNING")
            # Currently not running. Need to start before promoting.
            ocf_log info "Resource is currently not running"
            agent_start
            ;;
        *)
            # Failed resource. Let the cluster manager recover.
            ocf_log err "Unexpected error, cannot promote"
            exit $rc
            ;;
    esac

    # transform slave agent to master
    echo > ${OCF_RESKEY_master_flag_file}

    return $OCF_SUCCESS
}


agent_demote() {
    #local d
    local rc
    local pid

    get_monitor
    rc=$?
    #d=`date '+%Y%m%d %H:%M:%S'`
    #env >> /tmp/env-`echo $d | sed s/[\ \:]//g`
    case "$rc" in
        "$OCF_RUNNING_MASTER")
            # Running as master. Normal, expected behavior.
            ocf_log debug "Resource is currently running as Master"
            ;;
        "$OCF_SUCCESS")
            # Alread running as slave. Nothing to do.
            ocf_log debug "Resource is currently running as Slave"
            #echo "$d  [demote]  rc=$rc  Already_slave" >> /tmp/${OCF_RESKEY_app_prefix}.log
            return $OCF_SUCCESS
            ;;
        "$OCF_NOT_RUNNING")
            # Currently not running. Getting a demote action
            # in this state is unexpected. Exit with an error
            # and let the cluster manager recover.
            ocf_log err "Resource is currently not running"
            rm -f ${OCF_RESKEY_master_flag_file}
            #echo "$d  [demote]  rc=$rc  Resource_not_running  Emergency_exit" >> /tmp/${OCF_RESKEY_app_prefix}.log
            exit $OCF_ERR_GENERIC
            ;;
        "OCF_ERR_GENERIC")
            ocf_log err "Error while demote. Stopping resource."
            agent_stop
            rc=$?
            ;;
        *)
            # Failed resource. Let the cluster manager recover.
            ocf_log err "Unexpected error, cannot demote"
            exit $rc
            ;;
    esac

    # transform slave agent to master
    rm -f ${OCF_RESKEY_master_flag_file}

    #echo "$d  [demote]  rc=$rc" >> /tmp/${OCF_RESKEY_app_prefix}.log
    return $OCF_SUCCESS
}
#######################################################################

case "$1" in
  meta-data)    meta_data
                exit $OCF_SUCCESS;;
  usage|help)   usage
                exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
agent_validate || exit $?

# What kind of method was invoked?
case "$1" in
  start)        agent_start;;
  stop)         agent_stop;;
  status)       agent_status;;
  monitor)      agent_monitor;;
  validate)     agent_validate;;
  promote)      agent_promote;;
  demote)       agent_demote;;
  notify)       agent_notify;;
  validate-all) agent_validate;;
  *)            usage
                exit $OCF_ERR_UNIMPLEMENTED;;
esac
